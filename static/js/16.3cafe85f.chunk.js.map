{"version":3,"file":"static/js/16.3cafe85f.chunk.js","mappings":"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","sources":["../node_modules/tsparticles-particles.js/esm/marcbruederlin/Particles.js","../node_modules/tsparticles-particles.js/esm/VincentGarreau/particles.js","../node_modules/tsparticles-particles.js/esm/index.js","../node_modules/tsparticles-move-base/esm/Utils.js","../node_modules/tsparticles-move-base/esm/BaseMover.js","../node_modules/tsparticles-shape-circle/esm/CircleDrawer.js","../node_modules/tsparticles-updater-color/esm/Utils.js","../node_modules/tsparticles-updater-color/esm/ColorUpdater.js","../node_modules/tsparticles-updater-opacity/esm/OpacityUpdater.js","../node_modules/tsparticles-updater-opacity/esm/Utils.js","../node_modules/tsparticles-updater-out-modes/esm/BounceOutMode.js","../node_modules/tsparticles-updater-out-modes/esm/Utils.js","../node_modules/tsparticles-updater-out-modes/esm/DestroyOutMode.js","../node_modules/tsparticles-updater-out-modes/esm/NoneOutMode.js","../node_modules/tsparticles-updater-out-modes/esm/OutOutMode.js","../node_modules/tsparticles-updater-out-modes/esm/OutOfCanvasUpdater.js","../node_modules/tsparticles-updater-size/esm/SizeUpdater.js","../node_modules/tsparticles-updater-size/esm/Utils.js","../node_modules/tsparticles-basic/esm/index.js","../node_modules/tsparticles-move-base/esm/index.js","../node_modules/tsparticles-shape-circle/esm/index.js","../node_modules/tsparticles-updater-color/esm/index.js","../node_modules/tsparticles-updater-opacity/esm/index.js","../node_modules/tsparticles-updater-out-modes/esm/index.js","../node_modules/tsparticles-updater-size/esm/index.js","../node_modules/tsparticles-engine/esm/Core/Utils/ExternalInteractorBase.js","../node_modules/tsparticles-interaction-external-attract/esm/Options/Classes/Attract.js","../node_modules/tsparticles-interaction-external-attract/esm/Attractor.js","../node_modules/tsparticles-interaction-external-bounce/esm/Options/Classes/Bounce.js","../node_modules/tsparticles-interaction-external-bounce/esm/Bouncer.js","../node_modules/tsparticles-interaction-external-bubble/esm/Options/Classes/BubbleBase.js","../node_modules/tsparticles-interaction-external-bubble/esm/Options/Classes/BubbleDiv.js","../node_modules/tsparticles-interaction-external-bubble/esm/Options/Classes/Bubble.js","../node_modules/tsparticles-interaction-external-bubble/esm/Utils.js","../node_modules/tsparticles-interaction-external-bubble/esm/Bubbler.js","../node_modules/tsparticles-interaction-external-connect/esm/Options/Classes/ConnectLinks.js","../node_modules/tsparticles-interaction-external-connect/esm/Options/Classes/Connect.js","../node_modules/tsparticles-interaction-external-connect/esm/Utils.js","../node_modules/tsparticles-interaction-external-connect/esm/Connector.js","../node_modules/tsparticles-interaction-external-grab/esm/Options/Classes/GrabLinks.js","../node_modules/tsparticles-interaction-external-grab/esm/Options/Classes/Grab.js","../node_modules/tsparticles-interaction-external-grab/esm/Utils.js","../node_modules/tsparticles-interaction-external-grab/esm/Grabber.js","../node_modules/tsparticles-interaction-external-pause/esm/Pauser.js","../node_modules/tsparticles-interaction-external-push/esm/Options/Classes/Push.js","../node_modules/tsparticles-interaction-external-push/esm/Pusher.js","../node_modules/tsparticles-interaction-external-remove/esm/Options/Classes/Remove.js","../node_modules/tsparticles-interaction-external-remove/esm/Remover.js","../node_modules/tsparticles-interaction-external-repulse/esm/Options/Classes/RepulseBase.js","../node_modules/tsparticles-interaction-external-repulse/esm/Options/Classes/RepulseDiv.js","../node_modules/tsparticles-interaction-external-repulse/esm/Options/Classes/Repulse.js","../node_modules/tsparticles-interaction-external-repulse/esm/Repulser.js","../node_modules/tsparticles-interaction-external-slow/esm/Options/Classes/Slow.js","../node_modules/tsparticles-interaction-external-slow/esm/Slower.js","../node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js","../node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js","../node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js","../node_modules/tsparticles-shape-image/esm/Utils.js","../node_modules/tsparticles-shape-image/esm/ImageDrawer.js","../node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js","../node_modules/tsparticles-shape-image/esm/ImagePreloader.js","../node_modules/tsparticles-shape-image/esm/index.js","../node_modules/tsparticles-updater-life/esm/Options/Classes/LifeDelay.js","../node_modules/tsparticles-updater-life/esm/Options/Classes/LifeDuration.js","../node_modules/tsparticles-updater-life/esm/Options/Classes/Life.js","../node_modules/tsparticles-updater-life/esm/LifeUpdater.js","../node_modules/tsparticles-shape-line/esm/LineDrawer.js","../node_modules/tsparticles-move-parallax/esm/ParallaxMover.js","../node_modules/tsparticles-engine/esm/Core/Utils/ParticlesInteractorBase.js","../node_modules/tsparticles-interaction-particles-attract/esm/Attractor.js","../node_modules/tsparticles-interaction-particles-collisions/esm/Absorb.js","../node_modules/tsparticles-interaction-particles-collisions/esm/Bounce.js","../node_modules/tsparticles-interaction-particles-collisions/esm/ResolveCollision.js","../node_modules/tsparticles-interaction-particles-collisions/esm/Destroy.js","../node_modules/tsparticles-interaction-particles-collisions/esm/Collider.js","../node_modules/tsparticles-interaction-particles-links/esm/CircleWarp.js","../node_modules/tsparticles-interaction-particles-links/esm/Options/Classes/LinksShadow.js","../node_modules/tsparticles-interaction-particles-links/esm/Options/Classes/LinksTriangle.js","../node_modules/tsparticles-interaction-particles-links/esm/Options/Classes/Links.js","../node_modules/tsparticles-interaction-particles-links/esm/Linker.js","../node_modules/tsparticles-interaction-particles-links/esm/Utils.js","../node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js","../node_modules/tsparticles-interaction-particles-links/esm/plugin.js","../node_modules/tsparticles-interaction-particles-links/esm/index.js","../node_modules/tsparticles-interaction-particles-links/esm/interaction.js","../node_modules/tsparticles-shape-polygon/esm/PolygonDrawerBase.js","../node_modules/tsparticles-shape-polygon/esm/PolygonDrawer.js","../node_modules/tsparticles-shape-polygon/esm/TriangleDrawer.js","../node_modules/tsparticles-shape-polygon/esm/index.js","../node_modules/tsparticles-updater-rotate/esm/Options/Classes/RotateAnimation.js","../node_modules/tsparticles-updater-rotate/esm/Options/Classes/Rotate.js","../node_modules/tsparticles-updater-rotate/esm/RotateUpdater.js","../node_modules/tsparticles-shape-square/esm/SquareDrawer.js","../node_modules/tsparticles-shape-star/esm/StarDrawer.js","../node_modules/tsparticles-updater-stroke-color/esm/Utils.js","../node_modules/tsparticles-updater-stroke-color/esm/StrokeColorUpdater.js","../node_modules/tsparticles-shape-text/esm/TextDrawer.js","../node_modules/tsparticles-slim/esm/index.js","../node_modules/tsparticles-move-parallax/esm/index.js","../node_modules/tsparticles-interaction-external-attract/esm/index.js","../node_modules/tsparticles-interaction-external-bounce/esm/index.js","../node_modules/tsparticles-interaction-external-bubble/esm/index.js","../node_modules/tsparticles-interaction-external-connect/esm/index.js","../node_modules/tsparticles-interaction-external-grab/esm/index.js","../node_modules/tsparticles-interaction-external-pause/esm/index.js","../node_modules/tsparticles-interaction-external-push/esm/index.js","../node_modules/tsparticles-interaction-external-remove/esm/index.js","../node_modules/tsparticles-interaction-external-repulse/esm/index.js","../node_modules/tsparticles-interaction-external-slow/esm/index.js","../node_modules/tsparticles-interaction-particles-attract/esm/index.js","../node_modules/tsparticles-interaction-particles-collisions/esm/index.js","../node_modules/tsparticles-plugin-easing-quad/esm/index.js","../node_modules/tsparticles-shape-line/esm/index.js","../node_modules/tsparticles-shape-square/esm/index.js","../node_modules/tsparticles-shape-star/esm/index.js","../node_modules/tsparticles-shape-text/esm/index.js","../node_modules/tsparticles-updater-life/esm/index.js","../node_modules/tsparticles-updater-rotate/esm/index.js","../node_modules/tsparticles-updater-stroke-color/esm/index.js"],"sourcesContent":["import { tsParticles } from \"tsparticles-engine\";\nexport class Particles {\n    static init(options) {\n        const particles = new Particles(), selector = options.selector;\n        if (!selector) {\n            throw new Error(\"No selector provided\");\n        }\n        const el = document.querySelector(selector);\n        if (!el) {\n            throw new Error(\"No element found for selector\");\n        }\n        tsParticles\n            .set(selector.replace(\".\", \"\").replace(\"!\", \"\"), el, {\n            fullScreen: {\n                enable: false,\n            },\n            particles: {\n                color: {\n                    value: options.color ?? \"!000000\",\n                },\n                links: {\n                    color: \"random\",\n                    distance: options.minDistance ?? 120,\n                    enable: options.connectParticles ?? false,\n                },\n                move: {\n                    enable: true,\n                    speed: options.speed ?? 0.5,\n                },\n                number: {\n                    value: options.maxParticles ?? 100,\n                },\n                size: {\n                    value: { min: 1, max: options.sizeVariations ?? 3 },\n                },\n            },\n            responsive: options.responsive?.map((responsive) => ({\n                maxWidth: responsive.breakpoint,\n                options: {\n                    particles: {\n                        color: {\n                            value: responsive.options?.color,\n                        },\n                        links: {\n                            distance: responsive.options?.minDistance,\n                            enable: responsive.options?.connectParticles,\n                        },\n                        number: {\n                            value: options.maxParticles,\n                        },\n                        move: {\n                            enable: true,\n                            speed: responsive.options?.speed,\n                        },\n                        size: {\n                            value: responsive.options?.sizeVariations,\n                        },\n                    },\n                },\n            })),\n        })\n            .then((container) => {\n            particles._container = container;\n        });\n        return particles;\n    }\n    destroy() {\n        const container = this._container;\n        container && container.destroy();\n    }\n    pauseAnimation() {\n        const container = this._container;\n        container && container.pause();\n    }\n    resumeAnimation() {\n        const container = this._container;\n        container && container.play();\n    }\n}\n","const initParticlesJS = (engine) => {\n    const particlesJS = (tagId, options) => {\n        return engine.load(tagId, options);\n    };\n    particlesJS.load = (tagId, pathConfigJson, callback) => {\n        engine\n            .loadJSON(tagId, pathConfigJson)\n            .then((container) => {\n            if (container) {\n                callback(container);\n            }\n        })\n            .catch(() => {\n            callback(undefined);\n        });\n    };\n    particlesJS.setOnClickHandler = (callback) => {\n        engine.setOnClickHandler(callback);\n    };\n    const pJSDom = engine.dom();\n    return { particlesJS, pJSDom };\n};\nexport { initParticlesJS };\n","import { Particles } from \"./marcbruederlin/Particles\";\nimport { initParticlesJS } from \"./VincentGarreau/particles\";\nconst initPjs = (engine) => {\n    const { particlesJS, pJSDom } = initParticlesJS(engine);\n    window.particlesJS = particlesJS;\n    window.pJSDom = pJSDom;\n    window.Particles = Particles;\n    return { particlesJS, pJSDom, Particles };\n};\nexport { initPjs };\n","import { clamp, getDistances, getRandom, } from \"tsparticles-engine\";\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -getRandom();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -getRandom();\n        }\n    }\n}\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n    applyPath(particle, delta);\n    const gravityOptions = particle.gravity, gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -1 : 1;\n    if (moveDrift && moveSpeed) {\n        particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n    }\n    if (gravityOptions?.enable && moveSpeed) {\n        particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n    }\n    const decay = particle.moveDecay;\n    particle.velocity.multTo(decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n    if (gravityOptions?.enable &&\n        maxSpeed > 0 &&\n        ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n            (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n            particle.velocity.y = velocity.y / moveSpeed;\n        }\n    }\n    const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n    velocity.multTo(zVelocityFactor);\n    const { position } = particle;\n    position.addTo(velocity);\n    if (moveOptions.vibrate) {\n        position.x += Math.sin(position.x * Math.cos(position.y));\n        position.y += Math.cos(position.y * Math.sin(position.x));\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n    if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n    }\n    else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n    }\n    particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = particle.pathGenerator?.generate(particle, delta);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : 1;\n}\n","import { getDistance, getRangeMax, getRangeValue, } from \"tsparticles-engine\";\nimport { applyDistance, getProximitySpeedFactor, move, spin } from \"./Utils\";\nconst diffFactor = 2;\nexport class BaseMover {\n    constructor() {\n        this._initSpin = (particle) => {\n            const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n            if (!spinOptions.enable) {\n                return;\n            }\n            const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        };\n    }\n    init(particle) {\n        const options = particle.options, gravityOptions = options.move.gravity;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        this._initSpin(particle);\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, pxRatio = container.retina.pixelRatio, slowFactor = getProximitySpeedFactor(particle), baseSpeed = (particle.retina.moveSpeed ??= getRangeValue(moveOptions.speed) * pxRatio) *\n            container.retina.reduceFactor, moveDrift = (particle.retina.moveDrift ??= getRangeValue(particle.options.move.drift) * pxRatio), maxSize = getRangeMax(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, moveSpeed = (baseSpeed * sizeFactor * slowFactor * (delta.factor || 1)) / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n        }\n        applyDistance(particle);\n    }\n}\n","import { isObject } from \"tsparticles-engine\";\nexport class CircleDrawer {\n    draw(context, particle, radius) {\n        if (!particle.circleRange) {\n            particle.circleRange = { min: 0, max: Math.PI * 2 };\n        }\n        const circleRange = particle.circleRange;\n        context.arc(0, 0, radius, circleRange.min, circleRange.max, false);\n    }\n    getSidesCount() {\n        return 12;\n    }\n    particleInit(container, particle) {\n        const shapeData = particle.shapeData, angle = shapeData?.angle ?? {\n            max: 360,\n            min: 0,\n        };\n        particle.circleRange = !isObject(angle)\n            ? {\n                min: 0,\n                max: (angle * Math.PI) / 180,\n            }\n            : { min: (angle.min * Math.PI) / 180, max: (angle.max * Math.PI) / 180 };\n    }\n}\n","import { randomInRange, } from \"tsparticles-engine\";\nfunction updateColorValue(delta, colorValue, valueAnimation, max, decrease) {\n    if (!colorValue ||\n        !valueAnimation.enable ||\n        ((colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0))) {\n        return;\n    }\n    if (!colorValue.time) {\n        colorValue.time = 0;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        colorValue.time += delta.value;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        return;\n    }\n    const offset = randomInRange(valueAnimation.offset), velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6, decay = colorValue.decay ?? 1;\n    if (!decrease || colorValue.status === \"increasing\") {\n        colorValue.value += velocity;\n        if (colorValue.value > max) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            if (decrease) {\n                colorValue.status = \"decreasing\";\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n    }\n    else {\n        colorValue.value -= velocity;\n        if (colorValue.value < 0) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            colorValue.status = \"increasing\";\n            colorValue.value += colorValue.value;\n        }\n    }\n    if (colorValue.velocity && decay !== 1) {\n        colorValue.velocity *= decay;\n    }\n    if (colorValue.value > max) {\n        colorValue.value %= max;\n    }\n}\nexport function updateColor(particle, delta) {\n    const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;\n    if (!color) {\n        return;\n    }\n    const { h, s, l } = color;\n    if (h) {\n        updateColorValue(delta, h, hAnimation, 360, false);\n    }\n    if (s) {\n        updateColorValue(delta, s, sAnimation, 100, true);\n    }\n    if (l) {\n        updateColorValue(delta, l, lAnimation, 100, true);\n    }\n}\n","import { getHslAnimationFromHsl, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { updateColor } from \"./Utils\";\nexport class ColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const hslColor = rangeColorToHsl(particle.options.color, particle.id, particle.options.reduceDuplicates);\n        if (hslColor) {\n            particle.color = getHslAnimationFromHsl(hslColor, particle.options.color.animation, this.container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            ((color?.h.value !== undefined && hAnimation.enable) ||\n                (color?.s.value !== undefined && sAnimation.enable) ||\n                (color?.l.value !== undefined && lAnimation.enable)));\n    }\n    update(particle, delta) {\n        updateColor(particle, delta);\n    }\n}\n","import { getRandom, getRangeValue, initParticleNumericAnimationValue, } from \"tsparticles-engine\";\nimport { updateOpacity } from \"./Utils\";\nexport class OpacityUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const opacityOptions = particle.options.opacity;\n        particle.opacity = initParticleNumericAnimationValue(opacityOptions, 1);\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            particle.opacity.velocity =\n                (getRangeValue(opacityAnimation.speed) / 100) * this.container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                particle.opacity.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!particle.opacity &&\n            particle.opacity.enable &&\n            ((particle.opacity.maxLoops ?? 0) <= 0 ||\n                ((particle.opacity.maxLoops ?? 0) > 0 &&\n                    (particle.opacity.loops ?? 0) < (particle.opacity.maxLoops ?? 0))));\n    }\n    reset(particle) {\n        if (particle.opacity) {\n            particle.opacity.time = 0;\n            particle.opacity.loops = 0;\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateOpacity(particle, delta);\n    }\n}\n","import { clamp } from \"tsparticles-engine\";\nfunction checkDestroy(particle, value, minValue, maxValue) {\n    switch (particle.options.opacity.animation.destroy) {\n        case \"max\":\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case \"min\":\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nexport function updateOpacity(particle, delta) {\n    const data = particle.opacity;\n    if (particle.destroyed || !data?.enable || ((data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0))) {\n        return;\n    }\n    const minValue = data.min, maxValue = data.max, decay = data.decay ?? 1;\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        return;\n    }\n    switch (data.status) {\n        case \"increasing\":\n            if (data.value >= maxValue) {\n                data.status = \"decreasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value += (data.velocity ?? 0) * delta.factor;\n            }\n            break;\n        case \"decreasing\":\n            if (data.value <= minValue) {\n                data.status = \"increasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value -= (data.velocity ?? 0) * delta.factor;\n            }\n            break;\n    }\n    if (data.velocity && data.decay !== 1) {\n        data.velocity *= decay;\n    }\n    checkDestroy(particle, data.value, minValue, maxValue);\n    if (!particle.destroyed) {\n        data.value = clamp(data.value, minValue, maxValue);\n    }\n}\n","import { calculateBounds, } from \"tsparticles-engine\";\nimport { bounceHorizontal, bounceVertical } from \"./Utils\";\nexport class BounceOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\n            \"bounce\",\n            \"bounce-vertical\",\n            \"bounce-horizontal\",\n            \"bounceVertical\",\n            \"bounceHorizontal\",\n            \"split\",\n        ];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n}\n","import { getValue } from \"tsparticles-engine\";\nexport function bounceHorizontal(data) {\n    if ((data.outMode !== \"bounce\" &&\n        data.outMode !== \"bounce-horizontal\" &&\n        data.outMode !== \"bounceHorizontal\" &&\n        data.outMode !== \"split\") ||\n        (data.direction !== \"left\" && data.direction !== \"right\")) {\n        return;\n    }\n    if (data.bounds.right < 0 && data.direction === \"left\") {\n        data.particle.position.x = data.size + data.offset.x;\n    }\n    else if (data.bounds.left > data.canvasSize.width && data.direction === \"right\") {\n        data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;\n    }\n    const velocity = data.particle.velocity.x;\n    let bounced = false;\n    if ((data.direction === \"right\" && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\n        (data.direction === \"left\" && data.bounds.left <= 0 && velocity < 0)) {\n        const newVelocity = getValue(data.particle.options.bounce.horizontal);\n        data.particle.velocity.x *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.x + data.size;\n    if (data.bounds.right >= data.canvasSize.width && data.direction === \"right\") {\n        data.particle.position.x = data.canvasSize.width - minPos;\n    }\n    else if (data.bounds.left <= 0 && data.direction === \"left\") {\n        data.particle.position.x = minPos;\n    }\n    if (data.outMode === \"split\") {\n        data.particle.destroy();\n    }\n}\nexport function bounceVertical(data) {\n    if ((data.outMode !== \"bounce\" &&\n        data.outMode !== \"bounce-vertical\" &&\n        data.outMode !== \"bounceVertical\" &&\n        data.outMode !== \"split\") ||\n        (data.direction !== \"bottom\" && data.direction !== \"top\")) {\n        return;\n    }\n    if (data.bounds.bottom < 0 && data.direction === \"top\") {\n        data.particle.position.y = data.size + data.offset.y;\n    }\n    else if (data.bounds.top > data.canvasSize.height && data.direction === \"bottom\") {\n        data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;\n    }\n    const velocity = data.particle.velocity.y;\n    let bounced = false;\n    if ((data.direction === \"bottom\" && data.bounds.bottom >= data.canvasSize.height && velocity > 0) ||\n        (data.direction === \"top\" && data.bounds.top <= 0 && velocity < 0)) {\n        const newVelocity = getValue(data.particle.options.bounce.vertical);\n        data.particle.velocity.y *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.y + data.size;\n    if (data.bounds.bottom >= data.canvasSize.height && data.direction === \"bottom\") {\n        data.particle.position.y = data.canvasSize.height - minPos;\n    }\n    else if (data.bounds.top <= 0 && data.direction === \"top\") {\n        data.particle.position.y = minPos;\n    }\n    if (data.outMode === \"split\") {\n        data.particle.destroy();\n    }\n}\n","import { Vector, getDistances, isPointInside, } from \"tsparticles-engine\";\nexport class DestroyOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"destroy\"];\n    }\n    update(particle, direction, _delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case \"normal\":\n            case \"outside\":\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                break;\n            case \"inside\": {\n                const { dx, dy } = getDistances(particle.position, particle.moveCenter);\n                const { x: vx, y: vy } = particle.velocity;\n                if ((vx < 0 && dx > particle.moveCenter.radius) ||\n                    (vy < 0 && dy > particle.moveCenter.radius) ||\n                    (vx >= 0 && dx < -particle.moveCenter.radius) ||\n                    (vy >= 0 && dy < -particle.moveCenter.radius)) {\n                    return;\n                }\n                break;\n            }\n        }\n        container.particles.remove(particle, undefined, true);\n    }\n}\n","import { Vector, isPointInside, } from \"tsparticles-engine\";\nexport class NoneOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"none\"];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        if ((particle.options.move.distance.horizontal &&\n            (direction === \"left\" || direction === \"right\")) ||\n            (particle.options.move.distance.vertical &&\n                (direction === \"top\" || direction === \"bottom\"))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container;\n        const canvasSize = container.canvas.size;\n        const pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < 0 && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < 0 && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!isPointInside(particle.position, container.canvas.size, Vector.origin, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === \"bottom\") ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === \"top\")) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\n","import { Vector, calculateBounds, getDistances, getRandom, isPointInside, randomInRange, } from \"tsparticles-engine\";\nexport class OutOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"out\"];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case \"inside\": {\n                const { x: vx, y: vy } = particle.velocity;\n                const circVec = Vector.origin;\n                circVec.length = particle.moveCenter.radius;\n                circVec.angle = particle.velocity.angle + Math.PI;\n                circVec.addTo(Vector.create(particle.moveCenter));\n                const { dx, dy } = getDistances(particle.position, circVec);\n                if ((vx <= 0 && dx >= 0) || (vy <= 0 && dy >= 0) || (vx >= 0 && dx <= 0) || (vy >= 0 && dy <= 0)) {\n                    return;\n                }\n                particle.position.x = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.width,\n                }));\n                particle.position.y = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.height,\n                }));\n                const { dx: newDx, dy: newDy } = getDistances(particle.position, particle.moveCenter);\n                particle.direction = Math.atan2(-newDy, -newDx);\n                particle.velocity.angle = particle.direction;\n                break;\n            }\n            default: {\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                switch (particle.outType) {\n                    case \"outside\": {\n                        particle.position.x =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.x;\n                        particle.position.y =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.y;\n                        const { dx, dy } = getDistances(particle.position, particle.moveCenter);\n                        if (particle.moveCenter.radius) {\n                            particle.direction = Math.atan2(dy, dx);\n                            particle.velocity.angle = particle.direction;\n                        }\n                        break;\n                    }\n                    case \"normal\": {\n                        const wrap = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n                            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n                            left: -particle.getRadius() - particle.offset.x,\n                            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n                            top: -particle.getRadius() - particle.offset.y,\n                        }, sizeValue = particle.getRadius(), nextBounds = calculateBounds(particle.position, sizeValue);\n                        if (direction === \"right\" &&\n                            nextBounds.left > canvasSize.width + particle.offset.x) {\n                            particle.position.x = newPos.left;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!wrap) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        else if (direction === \"left\" && nextBounds.right < -particle.offset.x) {\n                            particle.position.x = newPos.right;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!wrap) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        if (direction === \"bottom\" &&\n                            nextBounds.top > canvasSize.height + particle.offset.y) {\n                            if (!wrap) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.top;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        else if (direction === \"top\" && nextBounds.bottom < -particle.offset.y) {\n                            if (!wrap) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.bottom;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n}\n","import { BounceOutMode } from \"./BounceOutMode\";\nimport { DestroyOutMode } from \"./DestroyOutMode\";\nimport { NoneOutMode } from \"./NoneOutMode\";\nimport { OutOutMode } from \"./OutOutMode\";\nexport class OutOfCanvasUpdater {\n    constructor(container) {\n        this.container = container;\n        this._updateOutMode = (particle, delta, outMode, direction) => {\n            for (const updater of this.updaters) {\n                updater.update(particle, direction, delta, outMode);\n            }\n        };\n        this.updaters = [\n            new BounceOutMode(container),\n            new DestroyOutMode(container),\n            new OutOutMode(container),\n            new NoneOutMode(container),\n        ];\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning;\n    }\n    update(particle, delta) {\n        const outModes = particle.options.move.outModes;\n        this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, \"bottom\");\n        this._updateOutMode(particle, delta, outModes.left ?? outModes.default, \"left\");\n        this._updateOutMode(particle, delta, outModes.right ?? outModes.default, \"right\");\n        this._updateOutMode(particle, delta, outModes.top ?? outModes.default, \"top\");\n    }\n}\n","import { getRandom } from \"tsparticles-engine\";\nimport { updateSize } from \"./Utils\";\nexport class SizeUpdater {\n    init(particle) {\n        const container = particle.container, sizeOptions = particle.options.size, sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            particle.size.velocity =\n                ((particle.retina.sizeAnimationSpeed ?? container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                particle.size.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            particle.size.enable &&\n            ((particle.size.maxLoops ?? 0) <= 0 ||\n                ((particle.size.maxLoops ?? 0) > 0 && (particle.size.loops ?? 0) < (particle.size.maxLoops ?? 0))));\n    }\n    reset(particle) {\n        particle.size.loops = 0;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateSize(particle, delta);\n    }\n}\n","import { clamp } from \"tsparticles-engine\";\nfunction checkDestroy(particle, value, minValue, maxValue) {\n    switch (particle.options.size.animation.destroy) {\n        case \"max\":\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case \"min\":\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nexport function updateSize(particle, delta) {\n    const data = particle.size;\n    if (particle.destroyed ||\n        !data ||\n        !data.enable ||\n        ((data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0))) {\n        return;\n    }\n    const sizeVelocity = (data.velocity ?? 0) * delta.factor, minValue = data.min, maxValue = data.max, decay = data.decay ?? 1;\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        return;\n    }\n    switch (data.status) {\n        case \"increasing\":\n            if (data.value >= maxValue) {\n                data.status = \"decreasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value += sizeVelocity;\n            }\n            break;\n        case \"decreasing\":\n            if (data.value <= minValue) {\n                data.status = \"increasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value -= sizeVelocity;\n            }\n    }\n    if (data.velocity && decay !== 1) {\n        data.velocity *= decay;\n    }\n    checkDestroy(particle, data.value, minValue, maxValue);\n    if (!particle.destroyed) {\n        data.value = clamp(data.value, minValue, maxValue);\n    }\n}\n","import { loadBaseMover } from \"tsparticles-move-base\";\nimport { loadCircleShape } from \"tsparticles-shape-circle\";\nimport { loadColorUpdater } from \"tsparticles-updater-color\";\nimport { loadOpacityUpdater } from \"tsparticles-updater-opacity\";\nimport { loadOutModesUpdater } from \"tsparticles-updater-out-modes\";\nimport { loadSizeUpdater } from \"tsparticles-updater-size\";\nexport async function loadBasic(engine, refresh = true) {\n    await loadBaseMover(engine, false);\n    await loadCircleShape(engine, false);\n    await loadColorUpdater(engine, false);\n    await loadOpacityUpdater(engine, false);\n    await loadOutModesUpdater(engine, false);\n    await loadSizeUpdater(engine, false);\n    await engine.refresh(refresh);\n}\n","import { BaseMover } from \"./BaseMover\";\nexport async function loadBaseMover(engine, refresh = true) {\n    await engine.addMover(\"base\", () => new BaseMover(), refresh);\n}\n","import { CircleDrawer } from \"./CircleDrawer\";\nexport async function loadCircleShape(engine, refresh = true) {\n    await engine.addShape(\"circle\", new CircleDrawer(), refresh);\n}\n","import { ColorUpdater } from \"./ColorUpdater\";\nexport async function loadColorUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"color\", (container) => new ColorUpdater(container), refresh);\n}\n","import { OpacityUpdater } from \"./OpacityUpdater\";\nexport async function loadOpacityUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"opacity\", (container) => new OpacityUpdater(container), refresh);\n}\n","import { OutOfCanvasUpdater } from \"./OutOfCanvasUpdater\";\nexport async function loadOutModesUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"outModes\", (container) => new OutOfCanvasUpdater(container), refresh);\n}\n","import { SizeUpdater } from \"./SizeUpdater\";\nexport async function loadSizeUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"size\", () => new SizeUpdater(), refresh);\n}\n","export class ExternalInteractorBase {\n    constructor(container) {\n        this.container = container;\n        this.type = \"external\";\n    }\n}\n","export class Attract {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.easing = \"ease-out-quad\";\n        this.factor = 1;\n        this.maxSpeed = 50;\n        this.speed = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n    }\n}\n","import { Circle, ExternalInteractorBase, Vector, clamp, getDistances, getEasing, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Attract } from \"./Options/Classes/Attract\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._clickAttract = () => {\n            const container = this.container;\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            const { attract } = container;\n            if (!attract.finish) {\n                if (!attract.count) {\n                    attract.count = 0;\n                }\n                attract.count++;\n                if (attract.count === container.particles.count) {\n                    attract.finish = true;\n                }\n            }\n            if (attract.clicking) {\n                const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\n                if (!attractRadius || attractRadius < 0 || !mousePos) {\n                    return;\n                }\n                this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n            }\n            else if (attract.clicking === false) {\n                attract.particles = [];\n            }\n            return;\n        };\n        this._hoverAttract = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\n            if (!attractRadius || attractRadius < 0 || !mousePos) {\n                return;\n            }\n            this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n        };\n        this._processAttract = (position, attractRadius, area) => {\n            const container = this.container, attractOptions = container.actualOptions.interactivity.modes.attract;\n            if (!attractOptions) {\n                return;\n            }\n            const query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(particle.position, position);\n                const velocity = attractOptions.speed * attractOptions.factor;\n                const attractFactor = clamp(getEasing(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);\n                const normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\n                particle.position.subFrom(normVec);\n            }\n        };\n        this._engine = engine;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;\n            if (!attract || mode !== \"attract\") {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                if (!container.attract) {\n                    container.attract = { particles: [] };\n                }\n                container.attract.clicking = false;\n            }, attract.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;\n        if (!attract) {\n            return;\n        }\n        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n            this._hoverAttract();\n        }\n        else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n            this._clickAttract();\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.attract) {\n            options.attract = new Attract();\n        }\n        for (const source of sources) {\n            options.attract.load(source?.attract);\n        }\n    }\n    reset() {\n    }\n}\n","export class Bounce {\n    constructor() {\n        this.distance = 200;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n    }\n}\n","import { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce, } from \"tsparticles-engine\";\nimport { Bounce } from \"./Options/Classes/Bounce\";\nexport class Bouncer extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._processBounce = (position, radius, area) => {\n            const query = this.container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                if (area instanceof Circle) {\n                    circleBounce(circleBounceDataFromParticle(particle), {\n                        position,\n                        radius,\n                        mass: (radius ** 2 * Math.PI) / 2,\n                        velocity: Vector.origin,\n                        factor: Vector.origin,\n                    });\n                }\n                else if (area instanceof Rectangle) {\n                    rectBounce(particle, calculateBounds(position, radius));\n                }\n            }\n        };\n        this._processMouseBounce = () => {\n            const container = this.container, pxRatio = container.retina.pixelRatio, tolerance = 10 * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;\n            if (!radius || radius < 0 || !mousePos) {\n                return;\n            }\n            this._processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n        };\n        this._singleSelectorBounce = (selector, div) => {\n            const container = this.container, query = document.querySelectorAll(selector);\n            if (!query.length) {\n                return;\n            }\n            query.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n                }, radius = (elem.offsetWidth / 2) * pxRatio, tolerance = 10 * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, radius + tolerance)\n                    : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n                this._processBounce(pos, radius, area);\n            });\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, bounce = container.actualOptions.interactivity.modes.bounce;\n        if (!bounce) {\n            return;\n        }\n        container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n            this._processMouseBounce();\n        }\n        else {\n            divModeExecute(\"bounce\", divs, (selector, div) => this._singleSelectorBounce(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv;\n        return ((mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode)) ||\n            isDivModeEnabled(\"bounce\", divs));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bounce) {\n            options.bounce = new Bounce();\n        }\n        for (const source of sources) {\n            options.bounce.load(source?.bounce);\n        }\n    }\n    reset() {\n    }\n}\n","import { OptionsColor, executeOnSingleOrMultiple, isArray, } from \"tsparticles-engine\";\nexport class BubbleBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.mix = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.mix !== undefined) {\n            this.mix = data.mix;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        if (data.color !== undefined) {\n            const sourceColor = isArray(this.color) ? undefined : this.color;\n            this.color = executeOnSingleOrMultiple(data.color, (color) => {\n                return OptionsColor.create(sourceColor, color);\n            });\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { BubbleBase } from \"./BubbleBase\";\nexport class BubbleDiv extends BubbleBase {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    get ids() {\n        return executeOnSingleOrMultiple(this.selectors, (t) => t.replace(\"#\", \"\"));\n    }\n    set ids(value) {\n        this.selectors = executeOnSingleOrMultiple(value, (t) => `#${t}`);\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.ids !== undefined) {\n            this.ids = data.ids;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { BubbleBase } from \"./BubbleBase\";\nimport { BubbleDiv } from \"./BubbleDiv\";\nexport class Bubble extends BubbleBase {\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.divs = executeOnSingleOrMultiple(data.divs, (div) => {\n            const tmp = new BubbleDiv();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n","import { clamp } from \"tsparticles-engine\";\nexport function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\n","import { Circle, ExternalInteractorBase, Rectangle, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"tsparticles-engine\";\nimport { Bubble } from \"./Options/Classes/Bubble\";\nimport { calculateBubbleValue } from \"./Utils\";\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._clickBubble = () => {\n            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || !mouseClickPos) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            const distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < 0) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p)), { bubble } = container;\n            for (const particle of query) {\n                if (!bubble.clicking) {\n                    continue;\n                }\n                particle.bubble.inRange = !bubble.durationEnd;\n                const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n                if (timeSpent > bubbleOptions.duration) {\n                    bubble.durationEnd = true;\n                }\n                if (timeSpent > bubbleOptions.duration * 2) {\n                    bubble.clicking = false;\n                    bubble.durationEnd = false;\n                }\n                const sizeData = {\n                    bubbleObj: {\n                        optValue: container.retina.bubbleModeSize,\n                        value: particle.bubble.radius,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                        value: particle.size.value,\n                    },\n                    type: \"size\",\n                };\n                this._process(particle, distMouse, timeSpent, sizeData);\n                const opacityData = {\n                    bubbleObj: {\n                        optValue: bubbleOptions.opacity,\n                        value: particle.bubble.opacity,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.opacity.value),\n                        value: particle.opacity?.value ?? 1,\n                    },\n                    type: \"opacity\",\n                };\n                this._process(particle, distMouse, timeSpent, opacityData);\n                if (!bubble.durationEnd && distMouse <= distance) {\n                    this._hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n        };\n        this._hoverBubble = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < 0 || mousePos === undefined) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                particle.bubble.inRange = true;\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n                if (pointDistance <= distance) {\n                    if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n                        this._hoverBubbleSize(particle, ratio);\n                        this._hoverBubbleOpacity(particle, ratio);\n                        this._hoverBubbleColor(particle, ratio);\n                    }\n                }\n                else {\n                    this.reset(particle);\n                }\n                if (container.interactivity.status === mouseLeaveEvent) {\n                    this.reset(particle);\n                }\n            }\n        };\n        this._hoverBubbleColor = (particle, ratio, divBubble) => {\n            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\n            if (!bubbleOptions) {\n                return;\n            }\n            if (!particle.bubble.finalColor) {\n                const modeColor = bubbleOptions.color;\n                if (!modeColor) {\n                    return;\n                }\n                const bubbleColor = itemFromSingleOrMultiple(modeColor);\n                particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n            }\n            if (!particle.bubble.finalColor) {\n                return;\n            }\n            if (bubbleOptions.mix) {\n                particle.bubble.color = undefined;\n                const pColor = particle.getFillColor();\n                particle.bubble.color = pColor\n                    ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                    : particle.bubble.finalColor;\n            }\n            else {\n                particle.bubble.color = particle.bubble.finalColor;\n            }\n        };\n        this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\n            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\n            if (!modeOpacity) {\n                return;\n            }\n            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? 1, opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n            if (opacity !== undefined) {\n                particle.bubble.opacity = opacity;\n            }\n        };\n        this._hoverBubbleSize = (particle, ratio, divBubble) => {\n            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n            if (modeSize === undefined) {\n                return;\n            }\n            const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n            if (size !== undefined) {\n                particle.bubble.radius = size;\n            }\n        };\n        this._process = (particle, distMouse, timeSpent, data) => {\n            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || bubbleParam === undefined) {\n                return;\n            }\n            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n            if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            if (container.bubble.durationEnd) {\n                if (pObjBubble) {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble ?? pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === \"size\") {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === \"opacity\") {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n        };\n        this._singleSelectorHover = (delta, selector, div) => {\n            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble || !selectors.length) {\n                return;\n            }\n            selectors.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n                }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    if (!area.contains(particle.getPosition())) {\n                        continue;\n                    }\n                    particle.bubble.inRange = true;\n                    const divs = bubble.divs, divBubble = divMode(divs, elem);\n                    if (!particle.bubble.div || particle.bubble.div !== elem) {\n                        this.clear(particle, delta, true);\n                        particle.bubble.div = elem;\n                    }\n                    this._hoverBubbleSize(particle, 1, divBubble);\n                    this._hoverBubbleOpacity(particle, 1, divBubble);\n                    this._hoverBubbleColor(particle, 1, divBubble);\n                }\n            });\n        };\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    async interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this._hoverBubble();\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this._clickBubble();\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = isDivModeEnabled(\"bubble\", onDiv);\n        if (!(divBubble || (onHover.enable && mouse.position) || (onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        return isInArray(\"bubble\", onHover.mode) || isInArray(\"bubble\", onClick.mode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source?.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n}\n","export class ConnectLinks {\n    constructor() {\n        this.opacity = 0.5;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n","import { ConnectLinks } from \"./ConnectLinks\";\nexport class Connect {\n    constructor() {\n        this.distance = 80;\n        this.links = new ConnectLinks();\n        this.radius = 60;\n    }\n    get lineLinked() {\n        return this.links;\n    }\n    set lineLinked(value) {\n        this.links = value;\n    }\n    get line_linked() {\n        return this.links;\n    }\n    set line_linked(value) {\n        this.links = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links ?? data.lineLinked ?? data.line_linked);\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n","import { colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, } from \"tsparticles-engine\";\nexport function gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(0, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(gradStop > 1 ? 1 : gradStop, getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(1, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nexport function lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nexport function drawConnection(container, p1, p2) {\n    container.canvas.draw((ctx) => {\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, p1.retina.linksWidth ?? 0, ls, pos1, pos2);\n    });\n}\n","import { ExternalInteractorBase, isInArray, } from \"tsparticles-engine\";\nimport { Connect } from \"./Options/Classes/Connect\";\nimport { drawConnection } from \"./Utils\";\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position;\n            if (!container.retina.connectModeDistance ||\n                container.retina.connectModeDistance < 0 ||\n                !container.retina.connectModeRadius ||\n                container.retina.connectModeRadius < 0 ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            let i = 0;\n            for (const p1 of query) {\n                const pos1 = p1.getPosition();\n                for (const p2 of query.slice(i + 1)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(\"connect\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n","import { OptionsColor } from \"tsparticles-engine\";\nexport class GrabLinks {\n    constructor() {\n        this.blink = false;\n        this.consent = false;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n","import { GrabLinks } from \"./GrabLinks\";\nexport class Grab {\n    constructor() {\n        this.distance = 100;\n        this.links = new GrabLinks();\n    }\n    get lineLinked() {\n        return this.links;\n    }\n    set lineLinked(value) {\n        this.links = value;\n    }\n    get line_linked() {\n        return this.links;\n    }\n    set line_linked(value) {\n        this.links = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links ?? data.lineLinked ?? data.line_linked);\n    }\n}\n","import { drawLine, getStyleFromRgb } from \"tsparticles-engine\";\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    drawLine(context, begin, end);\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n}\nexport function drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw((ctx) => {\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, particle.retina.linksWidth ?? 0, beginPos, mousePos, lineColor, opacity);\n    });\n}\n","import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Grab } from \"./Options/Classes/Grab\";\nimport { drawGrab } from \"./Utils\";\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < 0) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= 0) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n","import { ExternalInteractorBase } from \"tsparticles-engine\";\nexport class Pauser extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== \"pause\") {\n                return;\n            }\n            const container = this.container;\n            if (container.getAnimationStatus()) {\n                container.pause();\n            }\n            else {\n                container.play();\n            }\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    reset() {\n    }\n}\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class Push {\n    constructor() {\n        this.default = true;\n        this.groups = [];\n        this.quantity = 4;\n    }\n    get particles_nb() {\n        return this.quantity;\n    }\n    set particles_nb(value) {\n        this.quantity = setRangeValue(value);\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.default !== undefined) {\n            this.default = data.default;\n        }\n        if (data.groups !== undefined) {\n            this.groups = data.groups.map((t) => t);\n        }\n        if (!this.groups.length) {\n            this.default = true;\n        }\n        const quantity = data.quantity ?? data.particles_nb;\n        if (quantity !== undefined) {\n            this.quantity = setRangeValue(quantity);\n        }\n    }\n}\n","import { ExternalInteractorBase, getRangeValue, itemFromArray, } from \"tsparticles-engine\";\nimport { Push } from \"./Options/Classes/Push\";\nexport class Pusher extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== \"push\") {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, pushOptions = options.interactivity.modes.push;\n            if (!pushOptions) {\n                return;\n            }\n            const quantity = getRangeValue(pushOptions.quantity);\n            if (quantity <= 0) {\n                return;\n            }\n            const group = itemFromArray([undefined, ...pushOptions.groups]), groupOptions = group !== undefined ? container.actualOptions.particles.groups[group] : undefined;\n            container.particles.push(quantity, container.interactivity.mouse, groupOptions, group);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.push) {\n            options.push = new Push();\n        }\n        for (const source of sources) {\n            options.push.load(source?.push);\n        }\n    }\n    reset() {\n    }\n}\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class Remove {\n    constructor() {\n        this.quantity = 2;\n    }\n    get particles_nb() {\n        return this.quantity;\n    }\n    set particles_nb(value) {\n        this.quantity = setRangeValue(value);\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const quantity = data.quantity ?? data.particles_nb;\n        if (quantity !== undefined) {\n            this.quantity = setRangeValue(quantity);\n        }\n    }\n}\n","import { ExternalInteractorBase, getRangeValue, } from \"tsparticles-engine\";\nimport { Remove } from \"./Options/Classes/Remove\";\nexport class Remover extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            const container = this.container, options = container.actualOptions;\n            if (!options.interactivity.modes.remove || mode !== \"remove\") {\n                return;\n            }\n            const removeNb = getRangeValue(options.interactivity.modes.remove.quantity);\n            container.particles.removeQuantity(removeNb);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.remove) {\n            options.remove = new Remove();\n        }\n        for (const source of sources) {\n            options.remove.load(source?.remove);\n        }\n    }\n    reset() {\n    }\n}\n","export class RepulseBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.factor = 100;\n        this.speed = 1;\n        this.maxSpeed = 50;\n        this.easing = \"ease-out-quad\";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { RepulseBase } from \"./RepulseBase\";\nexport class RepulseDiv extends RepulseBase {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    get ids() {\n        return executeOnSingleOrMultiple(this.selectors, (t) => t.replace(\"#\", \"\"));\n    }\n    set ids(value) {\n        this.selectors = executeOnSingleOrMultiple(value, (t) => `#${t}`);\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.ids !== undefined) {\n            this.ids = data.ids;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { RepulseBase } from \"./RepulseBase\";\nimport { RepulseDiv } from \"./RepulseDiv\";\nexport class Repulse extends RepulseBase {\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.divs = executeOnSingleOrMultiple(data.divs, (div) => {\n            const tmp = new RepulseDiv();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n","import { Circle, ExternalInteractorBase, Rectangle, Vector, clamp, divMode, divModeExecute, getDistances, getEasing, isDivModeEnabled, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Repulse } from \"./Options/Classes/Repulse\";\nexport class Repulser extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._clickRepulse = () => {\n            const container = this.container, repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            const repulse = container.repulse || { particles: [] };\n            if (!repulse.finish) {\n                if (!repulse.count) {\n                    repulse.count = 0;\n                }\n                repulse.count++;\n                if (repulse.count === container.particles.count) {\n                    repulse.finish = true;\n                }\n            }\n            if (repulse.clicking) {\n                const repulseDistance = container.retina.repulseModeDistance;\n                if (!repulseDistance || repulseDistance < 0) {\n                    return;\n                }\n                const repulseRadius = Math.pow(repulseDistance / 6, 3), mouseClickPos = container.interactivity.mouse.clickPosition;\n                if (mouseClickPos === undefined) {\n                    return;\n                }\n                const range = new Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius), query = container.particles.quadTree.query(range, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    const { dx, dy, distance } = getDistances(mouseClickPos, particle.position), d = distance ** 2, velocity = repulseOptions.speed, force = (-repulseRadius * velocity) / d;\n                    if (d <= repulseRadius) {\n                        repulse.particles.push(particle);\n                        const vect = Vector.create(dx, dy);\n                        vect.length = force;\n                        particle.velocity.setTo(vect);\n                    }\n                }\n            }\n            else if (repulse.clicking === false) {\n                for (const particle of repulse.particles) {\n                    particle.velocity.setTo(particle.initialVelocity);\n                }\n                repulse.particles = [];\n            }\n        };\n        this._hoverRepulse = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, repulseRadius = container.retina.repulseModeDistance;\n            if (!repulseRadius || repulseRadius < 0 || !mousePos) {\n                return;\n            }\n            this._processRepulse(mousePos, repulseRadius, new Circle(mousePos.x, mousePos.y, repulseRadius));\n        };\n        this._processRepulse = (position, repulseRadius, area, divRepulse) => {\n            const container = this.container, query = container.particles.quadTree.query(area, (p) => this.isEnabled(p)), repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(particle.position, position), velocity = (divRepulse?.speed ?? repulseOptions.speed) * repulseOptions.factor, repulseFactor = clamp(getEasing(repulseOptions.easing)(1 - distance / repulseRadius) * velocity, 0, repulseOptions.maxSpeed), normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * repulseFactor, distance === 0 ? velocity : (dy / distance) * repulseFactor);\n                particle.position.addTo(normVec);\n            }\n        };\n        this._singleSelectorRepulse = (selector, div) => {\n            const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n            if (!repulse) {\n                return;\n            }\n            const query = document.querySelectorAll(selector);\n            if (!query.length) {\n                return;\n            }\n            query.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n                }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), divs = repulse.divs, divRepulse = divMode(divs, elem);\n                this._processRepulse(pos, repulseRadius, area, divRepulse);\n            });\n        };\n        this._engine = engine;\n        if (!container.repulse) {\n            container.repulse = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, repulseOpts = options.interactivity.modes.repulse;\n            if (!repulseOpts || mode !== \"repulse\") {\n                return;\n            }\n            if (!container.repulse) {\n                container.repulse = { particles: [] };\n            }\n            const repulse = container.repulse;\n            repulse.clicking = true;\n            repulse.count = 0;\n            for (const particle of container.repulse.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            repulse.particles = [];\n            repulse.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                repulse.clicking = false;\n            }, repulseOpts.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n        if (!repulse) {\n            return;\n        }\n        container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hover = events.onHover, hoverEnabled = hover.enable, hoverMode = hover.mode, click = events.onClick, clickEnabled = click.enable, clickMode = click.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"repulse\", hoverMode)) {\n            this._hoverRepulse();\n        }\n        else if (clickEnabled && isInArray(\"repulse\", clickMode)) {\n            this._clickRepulse();\n        }\n        else {\n            divModeExecute(\"repulse\", divs, (selector, div) => this._singleSelectorRepulse(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv, hover = events.onHover, click = events.onClick, divRepulse = isDivModeEnabled(\"repulse\", divs);\n        if (!(divRepulse || (hover.enable && mouse.position) || (click.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = hover.mode, clickMode = click.mode;\n        return isInArray(\"repulse\", hoverMode) || isInArray(\"repulse\", clickMode) || divRepulse;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.repulse) {\n            options.repulse = new Repulse();\n        }\n        for (const source of sources) {\n            options.repulse.load(source?.repulse);\n        }\n    }\n    reset() {\n    }\n}\n","export class Slow {\n    constructor() {\n        this.factor = 3;\n        this.radius = 200;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n","import { ExternalInteractorBase, getDistance, isInArray, } from \"tsparticles-engine\";\nimport { Slow } from \"./Options/Classes/Slow\";\nexport class Slower extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear(particle, delta, force) {\n        if (particle.slow.inRange && !force) {\n            return;\n        }\n        particle.slow.factor = 1;\n    }\n    init() {\n        const container = this.container, slow = container.actualOptions.interactivity.modes.slow;\n        if (!slow) {\n            return;\n        }\n        container.retina.slowModeRadius = slow.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"slow\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.slow) {\n            options.slow = new Slow();\n        }\n        for (const source of sources) {\n            options.slow.load(source?.slow);\n        }\n    }\n    reset(particle) {\n        particle.slow.inRange = false;\n        const container = this.container, options = container.actualOptions, mousePos = container.interactivity.mouse.position, radius = container.retina.slowModeRadius, slowOptions = options.interactivity.modes.slow;\n        if (!slowOptions || !radius || radius < 0 || !mousePos) {\n            return;\n        }\n        const particlePos = particle.getPosition(), dist = getDistance(mousePos, particlePos), proximityFactor = dist / radius, slowFactor = slowOptions.factor, { slow } = particle;\n        if (dist > radius) {\n            return;\n        }\n        slow.inRange = true;\n        slow.factor = proximityFactor / slowFactor;\n    }\n}\n","export const InterlaceOffsets = [0, 4, 2, 1];\nexport const InterlaceSteps = [8, 8, 4, 2];\n","export class ByteStream {\n    constructor(bytes) {\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        this.pos += 2;\n        return this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        do {\n            size = this.data[this.pos++];\n            for (let count = size; --count >= 0; blockString += String.fromCharCode(this.data[this.pos++])) {\n            }\n        } while (size !== 0);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = 0, len = 0;\n        for (let offset = 0; (size = this.data[this.pos + offset]) !== 0; offset += size + 1) {\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        for (let i = 0; (size = this.data[this.pos++]) !== 0;) {\n            for (let count = size; --count >= 0; blockData[i++] = this.data[this.pos++]) {\n            }\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for (; this.data[this.pos] !== 0; this.pos += this.data[this.pos] + 1) {\n        }\n        this.pos++;\n    }\n}\n","import { InterlaceOffsets, InterlaceSteps } from \"./Constants\";\nimport { ByteStream } from \"./ByteStream\";\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nasync function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case 249: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case 255: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case 254: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case 1: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError(\"plain text extension without global color table\");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        return { r, g, b, a: index === getTransparencyIndex(null) ? (avgAlpha ? ~~((r + g + b) / 3) : 0) : 255 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (InterlaceOffsets[pass] < frame.height) {\n                for (let pixelPos = 0, lineIndex = 0;;) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (let i = 0; i < dic[code].length; i++) {\n                            const { r, g, b, a } = getColor(dic[code][i]);\n                            image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width +\n                                InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            break;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pixelPos = -4;;) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (let i = 0; i < dic[code].length; i++) {\n                    const { r, g, b, a } = getColor(dic[code][i]);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            await parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nexport function getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nexport async function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\n","import { errorPrefix, getLogger, getStyleFromHsl } from \"tsparticles-engine\";\nimport { decodeGIF, getGIFLoopAmount } from \"./GifUtils/Utils\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            getLogger().error(`${errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await decodeGIF(image.source);\n        image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? 0;\n        if (image.gifLoopCount === 0) {\n            image.gifLoopCount = Infinity;\n        }\n    }\n    catch {\n        image.error = true;\n    }\n    image.loading = false;\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        getLogger().error(`${errorPrefix} Image not found`);\n        image.error = true;\n    }\n    else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor ?? imageData.replace_color,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\n","import { errorPrefix } from \"tsparticles-engine\";\nimport { replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n    constructor(engine) {\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(context, particle, radius, opacity, delta) {\n        const image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n            if (!offscreenContext) {\n                throw new Error(\"could not create offscreen canvas context\");\n            }\n            offscreenContext.imageSmoothingQuality = \"low\";\n            offscreenContext.imageSmoothingEnabled = false;\n            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            if (particle.gifLoopCount === undefined) {\n                particle.gifLoopCount = image.gifLoopCount ?? 0;\n            }\n            let frameIndex = particle.gifFrame ?? 0;\n            const pos = { x: -image.gifData.width * 0.5, y: -image.gifData.height * 0.5 }, frame = image.gifData.frames[frameIndex];\n            if (particle.gifTime === undefined) {\n                particle.gifTime = 0;\n            }\n            if (!frame.bitmap) {\n                return;\n            }\n            context.scale(radius / image.gifData.width, radius / image.gifData.height);\n            switch (frame.disposalMethod) {\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 0:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    break;\n                case 1:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    break;\n                case 2:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    if (image.gifData.globalColorTable.length === 0) {\n                        offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);\n                    }\n                    else {\n                        offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n                    }\n                    break;\n                case 3:\n                    {\n                        const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                        context.drawImage(offscreenCanvas, pos.x, pos.y);\n                        offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.putImageData(previousImageData, 0, 0);\n                    }\n                    break;\n            }\n            particle.gifTime += delta.value;\n            if (particle.gifTime > frame.delayTime) {\n                particle.gifTime -= frame.delayTime;\n                if (++frameIndex >= image.gifData.frames.length) {\n                    if (--particle.gifLoopCount <= 0) {\n                        return;\n                    }\n                    frameIndex = 0;\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                }\n                particle.gifFrame = frameIndex;\n            }\n            context.scale(image.gifData.width / radius, image.gifData.height / radius);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            };\n            context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData, image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData, color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async () => {\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.fill, close = imageData.close ?? particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n}\n","export class Preload {\n    constructor() {\n        this.src = \"\";\n        this.gif = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.gif !== undefined) {\n            this.gif = data.gif;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.replaceColor !== undefined) {\n            this.replaceColor = data.replaceColor;\n        }\n        if (data.src !== undefined) {\n            this.src = data.src;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n","import { Preload } from \"./Options/Classes/Preload\";\nexport class ImagePreloaderPlugin {\n    constructor(engine) {\n        this.id = \"imagePreloader\";\n        this._engine = engine;\n    }\n    getPlugin() {\n        return {};\n    }\n    loadOptions(options, source) {\n        if (!source || !source.preload) {\n            return;\n        }\n        if (!options.preload) {\n            options.preload = [];\n        }\n        const preloadOptions = options.preload;\n        for (const item of source.preload) {\n            const existing = preloadOptions.find((t) => t.name === item.name || t.src === item.src);\n            if (existing) {\n                existing.load(item);\n            }\n            else {\n                const preload = new Preload();\n                preload.load(item);\n                preloadOptions.push(preload);\n            }\n        }\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n","import { downloadSvgImage, loadGifImage, loadImage } from \"./Utils\";\nimport { ImageDrawer } from \"./ImageDrawer\";\nimport { ImagePreloaderPlugin } from \"./ImagePreloader\";\nimport { errorPrefix } from \"tsparticles-engine\";\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - 3),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            const imageFunc = data.gif ? loadGifImage : data.replaceColor ? downloadSvgImage : loadImage;\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nexport async function loadImageShape(engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const preloader = new ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape([\"image\", \"images\"], new ImageDrawer(engine), refresh);\n}\n","import { ValueWithRandom } from \"tsparticles-engine\";\nexport class LifeDelay extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { ValueWithRandom } from \"tsparticles-engine\";\nexport class LifeDuration extends ValueWithRandom {\n    constructor() {\n        super();\n        this.random.minimumValue = 0.0001;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { LifeDelay } from \"./LifeDelay\";\nimport { LifeDuration } from \"./LifeDuration\";\nexport class Life {\n    constructor() {\n        this.count = 0;\n        this.delay = new LifeDelay();\n        this.duration = new LifeDuration();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.delay.load(data.delay);\n        this.duration.load(data.duration);\n    }\n}\n","import { getRandom, getRangeValue, randomInRange, setRangeValue, } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= 0) {\n            particle.life.duration = -1;\n        }\n        if (particle.life.count <= 0) {\n            particle.life.count = -1;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > 0;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source?.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const life = particle.life;\n        let justSpawned = false;\n        if (particle.spawning) {\n            life.delayTime += delta.value;\n            if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n            }\n            else {\n                return;\n            }\n        }\n        if (life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            life.time = 0;\n        }\n        else {\n            life.time += delta.value;\n        }\n        if (life.time < life.duration) {\n            return;\n        }\n        life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\n        particle.position.x = randomInRange(widthRange);\n        particle.position.y = randomInRange(heightRange);\n        particle.spawning = true;\n        life.delayTime = 0;\n        life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        if (lifeOptions) {\n            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n        }\n    }\n}\n","export class LineDrawer {\n    draw(context, particle, radius) {\n        const shapeData = particle.shapeData;\n        context.moveTo(-radius / 2, 0);\n        context.lineTo(radius / 2, 0);\n        context.lineCap = shapeData?.cap ?? \"butt\";\n    }\n    getSidesCount() {\n        return 1;\n    }\n}\n","import { isSsr } from \"tsparticles-engine\";\nexport class ParallaxMover {\n    init() {\n    }\n    isEnabled(particle) {\n        return (!isSsr() &&\n            !particle.destroyed &&\n            particle.container.actualOptions.interactivity.events.onHover.parallax.enable);\n    }\n    move(particle) {\n        const container = particle.container, options = container.actualOptions, parallaxOptions = options.interactivity.events.onHover.parallax;\n        if (isSsr() || !parallaxOptions.enable) {\n            return;\n        }\n        const parallaxForce = parallaxOptions.force, mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasSize = container.canvas.size, canvasCenter = {\n            x: canvasSize.width / 2,\n            y: canvasSize.height / 2,\n        }, parallaxSmooth = parallaxOptions.smooth, factor = particle.getRadius() / parallaxForce, centerDistance = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        }, { offset } = particle;\n        offset.x += (centerDistance.x - offset.x) / parallaxSmooth;\n        offset.y += (centerDistance.y - offset.y) / parallaxSmooth;\n    }\n}\n","export class ParticlesInteractorBase {\n    constructor(container) {\n        this.container = container;\n        this.type = \"particles\";\n    }\n}\n","import { ParticlesInteractorBase, getDistances, } from \"tsparticles-engine\";\nexport class Attractor extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(p1) {\n        const container = this.container, distance = p1.retina.attractDistance ?? container.retina.attractDistance, pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, distance);\n        for (const p2 of query) {\n            if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), { dx, dy } = getDistances(pos1, pos2), rotate = p1.options.move.attract.rotate, ax = dx / (rotate.x * 1000), ay = dy / (rotate.y * 1000), p1Factor = p2.size.value / p1.size.value, p2Factor = 1 / p1Factor;\n            p1.velocity.x -= ax * p1Factor;\n            p1.velocity.y -= ay * p1Factor;\n            p2.velocity.x += ax * p2Factor;\n            p2.velocity.y += ay * p2Factor;\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.move.attract.enable;\n    }\n    reset() {\n    }\n}\n","import { clamp } from \"tsparticles-engine\";\nfunction updateAbsorb(p1, r1, p2, r2, delta, pixelRatio) {\n    const factor = clamp((p1.options.collisions.absorb.speed * delta.factor) / 10, 0, r2);\n    p1.size.value += factor / 2;\n    p2.size.value -= factor;\n    if (r2 <= pixelRatio) {\n        p2.size.value = 0;\n        p2.destroy();\n    }\n}\nexport function absorb(p1, p2, delta, pixelRatio) {\n    const r1 = p1.getRadius(), r2 = p2.getRadius();\n    if (r1 === undefined && r2 !== undefined) {\n        p1.destroy();\n    }\n    else if (r1 !== undefined && r2 === undefined) {\n        p2.destroy();\n    }\n    else if (r1 !== undefined && r2 !== undefined) {\n        if (r1 >= r2) {\n            updateAbsorb(p1, r1, p2, r2, delta, pixelRatio);\n        }\n        else {\n            updateAbsorb(p2, r2, p1, r1, delta, pixelRatio);\n        }\n    }\n}\n","import { circleBounce, circleBounceDataFromParticle, getRangeValue } from \"tsparticles-engine\";\nconst fixBounceSpeed = (p) => {\n    if (p.collisionMaxSpeed === undefined) {\n        p.collisionMaxSpeed = getRangeValue(p.options.collisions.maxSpeed);\n    }\n    if (p.velocity.length > p.collisionMaxSpeed) {\n        p.velocity.length = p.collisionMaxSpeed;\n    }\n};\nexport function bounce(p1, p2) {\n    circleBounce(circleBounceDataFromParticle(p1), circleBounceDataFromParticle(p2));\n    fixBounceSpeed(p1);\n    fixBounceSpeed(p2);\n}\n","import { absorb } from \"./Absorb\";\nimport { bounce } from \"./Bounce\";\nimport { destroy } from \"./Destroy\";\nexport function resolveCollision(p1, p2, delta, pixelRatio) {\n    switch (p1.options.collisions.mode) {\n        case \"absorb\": {\n            absorb(p1, p2, delta, pixelRatio);\n            break;\n        }\n        case \"bounce\": {\n            bounce(p1, p2);\n            break;\n        }\n        case \"destroy\": {\n            destroy(p1, p2);\n            break;\n        }\n    }\n}\n","import { bounce } from \"./Bounce\";\nexport function destroy(p1, p2) {\n    if (!p1.unbreakable && !p2.unbreakable) {\n        bounce(p1, p2);\n    }\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n        p1.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n        p2.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n        const deleteP = p1.getRadius() >= p2.getRadius() ? p2 : p1;\n        deleteP.destroy();\n    }\n}\n","import { ParticlesInteractorBase, getDistance } from \"tsparticles-engine\";\nimport { resolveCollision } from \"./ResolveCollision\";\nexport class Collider extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(p1, delta) {\n        if (p1.destroyed || p1.spawning) {\n            return;\n        }\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), radius2 = p2.getRadius();\n            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n                continue;\n            }\n            const dist = getDistance(pos1, pos2), distP = radius1 + radius2;\n            if (dist > distP) {\n                continue;\n            }\n            resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n}\n","import { Circle, Rectangle } from \"tsparticles-engine\";\nexport class CircleWarp extends Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = { ...canvasSize };\n    }\n    contains(point) {\n        const { width, height } = this.canvasSize;\n        const { x, y } = point;\n        return (super.contains(point) ||\n            super.contains({ x: x - width, y }) ||\n            super.contains({ x: x - width, y: y - height }) ||\n            super.contains({ x, y: y - height }));\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * 2);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\n","import { OptionsColor } from \"tsparticles-engine\";\nexport class LinksShadow {\n    constructor() {\n        this.blur = 5;\n        this.color = new OptionsColor();\n        this.color.value = \"#000\";\n        this.enable = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.blur !== undefined) {\n            this.blur = data.blur;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n","import { OptionsColor } from \"tsparticles-engine\";\nexport class LinksTriangle {\n    constructor() {\n        this.enable = false;\n        this.frequency = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n","import { OptionsColor } from \"tsparticles-engine\";\nimport { LinksShadow } from \"./LinksShadow\";\nimport { LinksTriangle } from \"./LinksTriangle\";\nexport class Links {\n    constructor() {\n        this.blink = false;\n        this.color = new OptionsColor();\n        this.color.value = \"#fff\";\n        this.consent = false;\n        this.distance = 100;\n        this.enable = false;\n        this.frequency = 1;\n        this.opacity = 1;\n        this.shadow = new LinksShadow();\n        this.triangles = new LinksTriangle();\n        this.width = 1;\n        this.warp = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.id !== undefined) {\n            this.id = data.id;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        this.shadow.load(data.shadow);\n        this.triangles.load(data.triangles);\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n        if (data.warp !== undefined) {\n            this.warp = data.warp;\n        }\n    }\n}\n","import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"tsparticles-engine\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Links } from \"./Options/Classes/Links\";\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = getDistances(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** 2 + warpDistances.y ** 2);\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n        this._setColor = (p1) => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this.linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this.linkContainer = container;\n    }\n    clear() {\n    }\n    init() {\n        this.linkContainer.particles.linksColor = undefined;\n        this.linkContainer.particles.linksColors = new Map();\n    }\n    async interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? 0, warp = linkOpt1.warp, range = warp\n            ? new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize)\n            : new Circle(pos1.x, pos1.y, optDistance), query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some((t) => t.destination === p2) ||\n                p2.links.some((t) => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (1 - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links ?? source?.lineLinked ?? source?.line_linked);\n        }\n    }\n    reset() {\n    }\n}\n","import { drawLine, drawTriangle, getDistance, getDistances, getRandom, getStyleFromRgb, rangeColorToRgb, } from \"tsparticles-engine\";\nexport function drawLinkLine(params) {\n    let drawn = false;\n    const { begin, end, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;\n    if (getDistance(begin, end) <= maxDistance) {\n        drawLine(context, begin, end);\n        drawn = true;\n    }\n    else if (links.warp) {\n        let pi1;\n        let pi2;\n        const endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y,\n        };\n        const d1 = getDistances(begin, endNE);\n        if (d1.distance <= maxDistance) {\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n            pi1 = { x: 0, y: yi };\n            pi2 = { x: canvasSize.width, y: yi };\n        }\n        else {\n            const endSW = {\n                x: end.x,\n                y: end.y - canvasSize.height,\n            };\n            const d2 = getDistances(begin, endSW);\n            if (d2.distance <= maxDistance) {\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                const xi = -yi / (d2.dy / d2.dx);\n                pi1 = { x: xi, y: 0 };\n                pi2 = { x: xi, y: canvasSize.height };\n            }\n            else {\n                const endSE = {\n                    x: end.x - canvasSize.width,\n                    y: end.y - canvasSize.height,\n                };\n                const d3 = getDistances(begin, endSE);\n                if (d3.distance <= maxDistance) {\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                    const xi = -yi / (d3.dy / d3.dx);\n                    pi1 = { x: xi, y: yi };\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                }\n            }\n        }\n        if (pi1 && pi2) {\n            drawLine(context, begin, pi1);\n            drawLine(context, end, pi2);\n            drawn = true;\n        }\n    }\n    if (!drawn) {\n        return;\n    }\n    context.lineWidth = width;\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    const { shadow } = links;\n    if (shadow.enable) {\n        const shadowColor = rangeColorToRgb(shadow.color);\n        if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = getStyleFromRgb(shadowColor);\n        }\n    }\n    context.stroke();\n}\nexport function drawLinkTriangle(params) {\n    const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;\n    drawTriangle(context, pos1, pos2, pos3);\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n}\nexport function getLinkKey(ids) {\n    ids.sort((a, b) => a - b);\n    return ids.join(\"_\");\n}\nexport function setLinkFrequency(particles, dictionary) {\n    const key = getLinkKey(particles.map((t) => t.id));\n    let res = dictionary.get(key);\n    if (res === undefined) {\n        res = getRandom();\n        dictionary.set(key, res);\n    }\n    return res;\n}\n","import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb, } from \"tsparticles-engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils\";\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n        this._drawLinkLine = (p1, link) => {\n            const p1LinksOptions = p1.options.links;\n            if (!p1LinksOptions?.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            let opacity = link.opacity;\n            container.canvas.draw((ctx) => {\n                let colorLine;\n                const twinkle = p1.options.twinkle?.lines;\n                if (twinkle?.enable) {\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\n                    if (twinkling && twinkleRgb) {\n                        colorLine = twinkleRgb;\n                        opacity = getRangeValue(twinkle.opacity);\n                    }\n                }\n                if (!colorLine) {\n                    const linkColor = p1LinksOptions.id !== undefined\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\n                        : container.particles.linksColor;\n                    colorLine = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorLine) {\n                    return;\n                }\n                const width = p1.retina.linksWidth ?? 0, maxDistance = p1.retina.linksDistance ?? 0, { backgroundMask } = options;\n                drawLinkLine({\n                    context: ctx,\n                    width,\n                    begin: pos1,\n                    end: pos2,\n                    maxDistance,\n                    canvasSize: container.canvas.size,\n                    links: p1LinksOptions,\n                    backgroundMask: backgroundMask,\n                    colorLine,\n                    opacity,\n                });\n            });\n        };\n        this._drawLinkTriangle = (p1, link1, link2) => {\n            const linksOptions = p1.options.links;\n            if (!linksOptions?.enable) {\n                return;\n            }\n            const triangleOptions = linksOptions.triangles;\n            if (!triangleOptions.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) / 2;\n            if (opacityTriangle <= 0) {\n                return;\n            }\n            container.canvas.draw((ctx) => {\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? 0;\n                if (getDistance(pos1, pos2) > linksDistance ||\n                    getDistance(pos3, pos2) > linksDistance ||\n                    getDistance(pos3, pos1) > linksDistance) {\n                    return;\n                }\n                let colorTriangle = rangeColorToRgb(triangleOptions.color);\n                if (!colorTriangle) {\n                    const linkColor = linksOptions.id !== undefined\n                        ? container.particles.linksColors.get(linksOptions.id)\n                        : container.particles.linksColor;\n                    colorTriangle = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorTriangle) {\n                    return;\n                }\n                drawLinkTriangle({\n                    context: ctx,\n                    pos1,\n                    pos2,\n                    pos3,\n                    backgroundMask: options.backgroundMask,\n                    colorTriangle,\n                    opacityTriangle,\n                });\n            });\n        };\n        this._drawTriangles = (options, p1, link, p1Links) => {\n            const p2 = link.destination;\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n                return;\n            }\n            const vertices = p2.links?.filter((t) => {\n                const linkFreq = this._getLinkFrequency(p2, t.destination);\n                return (p2.options.links &&\n                    linkFreq <= p2.options.links.frequency &&\n                    p1Links.findIndex((l) => l.destination === t.destination) >= 0);\n            });\n            if (!vertices?.length) {\n                return;\n            }\n            for (const vertex of vertices) {\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n                if (triangleFreq > options.links.triangles.frequency) {\n                    continue;\n                }\n                this._drawLinkTriangle(p1, link, vertex);\n            }\n        };\n        this._getLinkFrequency = (p1, p2) => {\n            return setLinkFrequency([p1, p2], this._freqs.links);\n        };\n        this._getTriangleFrequency = (p1, p2, p3) => {\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n        };\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        const { links, options } = particle;\n        if (!links || links.length <= 0) {\n            return;\n        }\n        const p1Links = links.filter((l) => options.links && this._getLinkFrequency(particle, l.destination) <= options.links.frequency);\n        for (const link of p1Links) {\n            this._drawTriangles(options, particle, link, p1Links);\n            if (link.opacity > 0 && (particle.retina.linksWidth ?? 0) > 0) {\n                this._drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this.container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\n        retina.linksDistance = distance * ratio;\n        retina.linksWidth = width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n}\n","import { LinkInstance } from \"./LinkInstance\";\nclass LinksPlugin {\n    constructor() {\n        this.id = \"links\";\n    }\n    getPlugin(container) {\n        return new LinkInstance(container);\n    }\n    loadOptions() {\n    }\n    needsPlugin() {\n        return true;\n    }\n}\nexport async function loadLinksPlugin(engine, refresh = true) {\n    const plugin = new LinksPlugin();\n    await engine.addPlugin(plugin, refresh);\n}\n","import { loadLinksInteraction } from \"./interaction\";\nimport { loadLinksPlugin } from \"./plugin\";\nexport async function loadParticlesLinksInteraction(engine, refresh = true) {\n    await loadLinksInteraction(engine, refresh);\n    await loadLinksPlugin(engine, refresh);\n}\nexport * from \"./Options/Classes/Links\";\nexport * from \"./Options/Classes/LinksShadow\";\nexport * from \"./Options/Classes/LinksTriangle\";\nexport * from \"./Options/Interfaces/ILinks\";\nexport * from \"./Options/Interfaces/ILinksShadow\";\nexport * from \"./Options/Interfaces/ILinksTriangle\";\n","import { Linker } from \"./Linker\";\nexport async function loadLinksInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"particlesLinks\", (container) => new Linker(container), refresh);\n}\n","import { getRangeValue } from \"tsparticles-engine\";\nexport class PolygonDrawerBase {\n    draw(context, particle, radius) {\n        const start = this.getCenter(particle, radius), side = this.getSidesData(particle, radius), sideCount = side.count.numerator * side.count.denominator, decimalSides = side.count.numerator / side.count.denominator, interiorAngleDegrees = (180 * (decimalSides - 2)) / decimalSides, interiorAngle = Math.PI - (Math.PI * interiorAngleDegrees) / 180;\n        if (!context) {\n            return;\n        }\n        context.beginPath();\n        context.translate(start.x, start.y);\n        context.moveTo(0, 0);\n        for (let i = 0; i < sideCount; i++) {\n            context.lineTo(side.length, 0);\n            context.translate(side.length, 0);\n            context.rotate(interiorAngle);\n        }\n    }\n    getSidesCount(particle) {\n        const polygon = particle.shapeData;\n        return Math.round(getRangeValue(polygon?.sides ?? polygon?.nb_sides ?? 5));\n    }\n}\n","import { PolygonDrawerBase } from \"./PolygonDrawerBase\";\nexport class PolygonDrawer extends PolygonDrawerBase {\n    getCenter(particle, radius) {\n        return {\n            x: -radius / (particle.sides / 3.5),\n            y: -radius / (2.66 / 3.5),\n        };\n    }\n    getSidesData(particle, radius) {\n        const sides = particle.sides;\n        return {\n            count: {\n                denominator: 1,\n                numerator: sides,\n            },\n            length: (radius * 2.66) / (sides / 3),\n        };\n    }\n}\n","import { PolygonDrawerBase } from \"./PolygonDrawerBase\";\nexport class TriangleDrawer extends PolygonDrawerBase {\n    getCenter(particle, radius) {\n        return {\n            x: -radius,\n            y: radius / 1.66,\n        };\n    }\n    getSidesCount() {\n        return 3;\n    }\n    getSidesData(particle, radius) {\n        return {\n            count: {\n                denominator: 2,\n                numerator: 3,\n            },\n            length: radius * 2,\n        };\n    }\n}\n","import { PolygonDrawer } from \"./PolygonDrawer\";\nimport { TriangleDrawer } from \"./TriangleDrawer\";\nexport async function loadGenericPolygonShape(engine, refresh = true) {\n    await engine.addShape(\"polygon\", new PolygonDrawer(), refresh);\n}\nexport async function loadTriangleShape(engine, refresh = true) {\n    await engine.addShape(\"triangle\", new TriangleDrawer(), refresh);\n}\nexport async function loadPolygonShape(engine, refresh = true) {\n    await loadGenericPolygonShape(engine, refresh);\n    await loadTriangleShape(engine, refresh);\n}\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class RotateAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { ValueWithRandom, } from \"tsparticles-engine\";\nimport { RotateAnimation } from \"./RotateAnimation\";\nexport class Rotate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new RotateAnimation();\n        this.direction = \"clockwise\";\n        this.path = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.animation.load(data.animation);\n        if (data.path !== undefined) {\n            this.path = data.path;\n        }\n    }\n}\n","import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Rotate } from \"./Options/Classes/Rotate\";\nfunction updateRotate(particle, delta) {\n    const rotate = particle.rotate, rotateOptions = particle.options.rotate;\n    if (!rotate || !rotateOptions) {\n        return;\n    }\n    const rotateAnimation = rotateOptions.animation, speed = (rotate.velocity ?? 0) * delta.factor, max = 2 * Math.PI, decay = rotate.decay ?? 1;\n    if (!rotateAnimation.enable) {\n        return;\n    }\n    switch (rotate.status) {\n        case \"increasing\":\n            rotate.value += speed;\n            if (rotate.value > max) {\n                rotate.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n                rotate.value += max;\n            }\n            break;\n    }\n    if (rotate.velocity && decay !== 1) {\n        rotate.velocity *= decay;\n    }\n}\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.rotate.status = \"increasing\";\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source?.rotate);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRotate(particle, delta);\n        particle.rotation = particle.rotate?.value ?? 0;\n    }\n}\n","const fixFactor = Math.sqrt(2);\nexport class SquareDrawer {\n    draw(context, particle, radius) {\n        const fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * 2;\n        context.rect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter);\n    }\n    getSidesCount() {\n        return 4;\n    }\n}\n","import { getRangeValue } from \"tsparticles-engine\";\nexport class StarDrawer {\n    draw(context, particle, radius) {\n        const sides = particle.sides, inset = particle.starInset ?? 2;\n        context.moveTo(0, 0 - radius);\n        for (let i = 0; i < sides; i++) {\n            context.rotate(Math.PI / sides);\n            context.lineTo(0, 0 - radius * inset);\n            context.rotate(Math.PI / sides);\n            context.lineTo(0, 0 - radius);\n        }\n    }\n    getSidesCount(particle) {\n        const star = particle.shapeData;\n        return Math.round(getRangeValue(star?.sides ?? star?.nb_sides ?? 5));\n    }\n    particleInit(container, particle) {\n        const star = particle.shapeData, inset = getRangeValue(star?.inset ?? 2);\n        particle.starInset = inset;\n    }\n}\n","import { randomInRange, } from \"tsparticles-engine\";\nfunction updateColorValue(delta, colorValue, valueAnimation, max, decrease) {\n    if (!colorValue ||\n        !valueAnimation.enable ||\n        ((colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0))) {\n        return;\n    }\n    if (!colorValue.time) {\n        colorValue.time = 0;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        colorValue.time += delta.value;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        return;\n    }\n    const offset = randomInRange(valueAnimation.offset), velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6, decay = colorValue.decay ?? 1;\n    if (!decrease || colorValue.status === \"increasing\") {\n        colorValue.value += velocity;\n        if (colorValue.value > max) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            if (decrease) {\n                colorValue.status = \"decreasing\";\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n    }\n    else {\n        colorValue.value -= velocity;\n        if (colorValue.value < 0) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            colorValue.status = \"increasing\";\n            colorValue.value += colorValue.value;\n        }\n    }\n    if (colorValue.velocity && decay !== 1) {\n        colorValue.velocity *= decay;\n    }\n    if (colorValue.value > max) {\n        colorValue.value %= max;\n    }\n}\nexport function updateStrokeColor(particle, delta) {\n    if (!particle.strokeColor || !particle.strokeAnimation) {\n        return;\n    }\n    const { h, s, l } = particle.strokeColor, { h: hAnimation, s: sAnimation, l: lAnimation } = particle.strokeAnimation;\n    if (h) {\n        updateColorValue(delta, h, hAnimation, 360, false);\n    }\n    if (s) {\n        updateColorValue(delta, s, sAnimation, 100, true);\n    }\n    if (l) {\n        updateColorValue(delta, l, lAnimation, 100, true);\n    }\n}\n","import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { updateStrokeColor } from \"./Utils\";\nexport class StrokeColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, options = particle.options;\n        const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);\n        particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n        particle.strokeOpacity = getRangeValue(stroke.opacity ?? 1);\n        particle.strokeAnimation = stroke.color?.animation;\n        const strokeHslColor = rangeColorToHsl(stroke.color) ?? particle.getFillColor();\n        if (strokeHslColor) {\n            particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const color = particle.strokeAnimation, { strokeColor } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!color &&\n            ((strokeColor?.h.value !== undefined && strokeColor.h.enable) ||\n                (strokeColor?.s.value !== undefined && strokeColor.s.enable) ||\n                (strokeColor?.l.value !== undefined && strokeColor.l.enable)));\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateStrokeColor(particle, delta);\n    }\n}\n","import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n    draw(context, particle, radius, opacity) {\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        if (particle.text === undefined) {\n            particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n        }\n        const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * 2, font = character.font ?? \"Verdana\", fill = particle.fill, offsetX = (text.length * radius) / 2;\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\n        const pos = {\n            x: -offsetX,\n            y: radius / 2,\n        };\n        context.globalAlpha = opacity;\n        if (fill) {\n            context.fillText(text, pos.x, pos.y);\n        }\n        else {\n            context.strokeText(text, pos.x, pos.y);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n","import { initPjs } from \"tsparticles-particles.js\";\nimport { loadBasic } from \"tsparticles-basic\";\nimport { loadEasingQuadPlugin } from \"tsparticles-plugin-easing-quad\";\nimport { loadExternalAttractInteraction } from \"tsparticles-interaction-external-attract\";\nimport { loadExternalBounceInteraction } from \"tsparticles-interaction-external-bounce\";\nimport { loadExternalBubbleInteraction } from \"tsparticles-interaction-external-bubble\";\nimport { loadExternalConnectInteraction } from \"tsparticles-interaction-external-connect\";\nimport { loadExternalGrabInteraction } from \"tsparticles-interaction-external-grab\";\nimport { loadExternalPauseInteraction } from \"tsparticles-interaction-external-pause\";\nimport { loadExternalPushInteraction } from \"tsparticles-interaction-external-push\";\nimport { loadExternalRemoveInteraction } from \"tsparticles-interaction-external-remove\";\nimport { loadExternalRepulseInteraction } from \"tsparticles-interaction-external-repulse\";\nimport { loadExternalSlowInteraction } from \"tsparticles-interaction-external-slow\";\nimport { loadImageShape } from \"tsparticles-shape-image\";\nimport { loadLifeUpdater } from \"tsparticles-updater-life\";\nimport { loadLineShape } from \"tsparticles-shape-line\";\nimport { loadParallaxMover } from \"tsparticles-move-parallax\";\nimport { loadParticlesAttractInteraction } from \"tsparticles-interaction-particles-attract\";\nimport { loadParticlesCollisionsInteraction } from \"tsparticles-interaction-particles-collisions\";\nimport { loadParticlesLinksInteraction } from \"tsparticles-interaction-particles-links\";\nimport { loadPolygonShape } from \"tsparticles-shape-polygon\";\nimport { loadRotateUpdater } from \"tsparticles-updater-rotate\";\nimport { loadSquareShape } from \"tsparticles-shape-square\";\nimport { loadStarShape } from \"tsparticles-shape-star\";\nimport { loadStrokeColorUpdater } from \"tsparticles-updater-stroke-color\";\nimport { loadTextShape } from \"tsparticles-shape-text\";\nexport async function loadSlim(engine, refresh = true) {\n    initPjs(engine);\n    await loadParallaxMover(engine, false);\n    await loadExternalAttractInteraction(engine, false);\n    await loadExternalBounceInteraction(engine, false);\n    await loadExternalBubbleInteraction(engine, false);\n    await loadExternalConnectInteraction(engine, false);\n    await loadExternalGrabInteraction(engine, false);\n    await loadExternalPauseInteraction(engine, false);\n    await loadExternalPushInteraction(engine, false);\n    await loadExternalRemoveInteraction(engine, false);\n    await loadExternalRepulseInteraction(engine, false);\n    await loadExternalSlowInteraction(engine, false);\n    await loadParticlesAttractInteraction(engine, false);\n    await loadParticlesCollisionsInteraction(engine, false);\n    await loadParticlesLinksInteraction(engine, false);\n    await loadEasingQuadPlugin();\n    await loadImageShape(engine, false);\n    await loadLineShape(engine, false);\n    await loadPolygonShape(engine, false);\n    await loadSquareShape(engine, false);\n    await loadStarShape(engine, false);\n    await loadTextShape(engine, false);\n    await loadLifeUpdater(engine, false);\n    await loadRotateUpdater(engine, false);\n    await loadStrokeColorUpdater(engine, false);\n    await loadBasic(engine, refresh);\n}\n","import { ParallaxMover } from \"./ParallaxMover\";\nexport async function loadParallaxMover(engine, refresh = true) {\n    await engine.addMover(\"parallax\", () => new ParallaxMover(), refresh);\n}\n","import { Attractor } from \"./Attractor\";\nexport async function loadExternalAttractInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalAttract\", (container) => new Attractor(engine, container), refresh);\n}\nexport * from \"./Options/Classes/Attract\";\nexport * from \"./Options/Interfaces/IAttract\";\n","import { Bouncer } from \"./Bouncer\";\nexport async function loadExternalBounceInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalBounce\", (container) => new Bouncer(container), refresh);\n}\nexport * from \"./Options/Classes/Bounce\";\nexport * from \"./Options/Interfaces/IBounce\";\n","import { Bubbler } from \"./Bubbler\";\nexport async function loadExternalBubbleInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalBubble\", (container) => new Bubbler(container), refresh);\n}\nexport * from \"./Options/Classes/BubbleBase\";\nexport * from \"./Options/Classes/BubbleDiv\";\nexport * from \"./Options/Classes/Bubble\";\nexport * from \"./Options/Interfaces/IBubbleBase\";\nexport * from \"./Options/Interfaces/IBubbleDiv\";\nexport * from \"./Options/Interfaces/IBubble\";\n","import { Connector } from \"./Connector\";\nexport async function loadExternalConnectInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalConnect\", (container) => new Connector(container), refresh);\n}\nexport * from \"./Options/Classes/Connect\";\nexport * from \"./Options/Classes/ConnectLinks\";\nexport * from \"./Options/Interfaces/IConnect\";\nexport * from \"./Options/Interfaces/IConnectLinks\";\n","import { Grabber } from \"./Grabber\";\nexport async function loadExternalGrabInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalGrab\", (container) => new Grabber(container), refresh);\n}\nexport * from \"./Options/Classes/Grab\";\nexport * from \"./Options/Classes/GrabLinks\";\nexport * from \"./Options/Interfaces/IGrab\";\nexport * from \"./Options/Interfaces/IGrabLinks\";\n","import { Pauser } from \"./Pauser\";\nexport async function loadExternalPauseInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalPause\", (container) => new Pauser(container), refresh);\n}\n","import { Pusher } from \"./Pusher\";\nexport async function loadExternalPushInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalPush\", (container) => new Pusher(container), refresh);\n}\nexport * from \"./Options/Classes/Push\";\nexport * from \"./Options/Interfaces/IPush\";\n","import { Remover } from \"./Remover\";\nexport async function loadExternalRemoveInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalRemove\", (container) => new Remover(container), refresh);\n}\nexport * from \"./Options/Classes/Remove\";\nexport * from \"./Options/Interfaces/IRemove\";\n","import { Repulser } from \"./Repulser\";\nexport async function loadExternalRepulseInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalRepulse\", (container) => new Repulser(engine, container), refresh);\n}\nexport * from \"./Options/Classes/RepulseBase\";\nexport * from \"./Options/Classes/RepulseDiv\";\nexport * from \"./Options/Classes/Repulse\";\nexport * from \"./Options/Interfaces/IRepulseBase\";\nexport * from \"./Options/Interfaces/IRepulseDiv\";\nexport * from \"./Options/Interfaces/IRepulse\";\n","import { Slower } from \"./Slower\";\nexport async function loadExternalSlowInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalSlow\", (container) => new Slower(container), refresh);\n}\nexport * from \"./Options/Classes/Slow\";\nexport * from \"./Options/Interfaces/ISlow\";\n","import { Attractor } from \"./Attractor\";\nexport async function loadParticlesAttractInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"particlesAttract\", (container) => new Attractor(container), refresh);\n}\n","import { Collider } from \"./Collider\";\nexport async function loadParticlesCollisionsInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"particlesCollisions\", (container) => new Collider(container), refresh);\n}\n","import { addEasing } from \"tsparticles-engine\";\nexport async function loadEasingQuadPlugin() {\n    addEasing(\"ease-in-quad\", (value) => value ** 2);\n    addEasing(\"ease-out-quad\", (value) => 1 - (1 - value) ** 2);\n    addEasing(\"ease-in-out-quad\", (value) => (value < 0.5 ? 2 * value ** 2 : 1 - (-2 * value + 2) ** 2 / 2));\n}\n","import { LineDrawer } from \"./LineDrawer\";\nexport async function loadLineShape(engine, refresh = true) {\n    await engine.addShape(\"line\", new LineDrawer(), refresh);\n}\n","import { SquareDrawer } from \"./SquareDrawer\";\nexport async function loadSquareShape(engine, refresh = true) {\n    await engine.addShape([\"edge\", \"square\"], new SquareDrawer(), refresh);\n}\n","import { StarDrawer } from \"./StarDrawer\";\nexport async function loadStarShape(engine, refresh = true) {\n    await engine.addShape(\"star\", new StarDrawer(), refresh);\n}\n","import { TextDrawer, validTypes } from \"./TextDrawer\";\nexport async function loadTextShape(engine, refresh = true) {\n    await engine.addShape(validTypes, new TextDrawer(), refresh);\n}\n","import { LifeUpdater } from \"./LifeUpdater\";\nexport async function loadLifeUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"life\", (container) => new LifeUpdater(container), refresh);\n}\n","import { RotateUpdater } from \"./RotateUpdater\";\nexport async function loadRotateUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"rotate\", (container) => new RotateUpdater(container), refresh);\n}\n","import { StrokeColorUpdater } from \"./StrokeColorUpdater\";\nexport async function loadStrokeColorUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"strokeColor\", (container) => new StrokeColorUpdater(container), refresh);\n}\n"],"names":["Particles","init","options","_options$color","_options$minDistance","_options$connectParti","_options$speed","_options$maxParticles","_options$sizeVariatio","_options$responsive","particles","selector","Error","el","document","querySelector","tsParticles","set","replace","fullScreen","enable","color","value","links","distance","minDistance","connectParticles","move","speed","number","maxParticles","size","min","max","sizeVariations","responsive","map","_responsive$options","_responsive$options2","_responsive$options3","_responsive$options4","_responsive$options5","maxWidth","breakpoint","then","container","_container","destroy","this","pauseAnimation","pause","resumeAnimation","play","initPjs","engine","particlesJS","pJSDom","tagId","load","pathConfigJson","callback","loadJSON","catch","undefined","setOnClickHandler","dom","initParticlesJS","window","particle","moveOptions","moveSpeed","maxSpeed","moveDrift","delta","_particle$pathGenerat","particlesOptions","pathOptions","path","lastPathTime","pathDelay","pathGenerator","generate","velocity","addTo","clamp","x","y","applyPath","gravityOptions","gravity","gravityFactor","inverse","factor","acceleration","decay","moveDecay","multTo","mult","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","position","vibrate","Math","sin","cos","BaseMover","constructor","_initSpin","_spinOptions$position","spinOptions","spin","spinPos","spinCenter","canvas","width","height","pos","getPosition","getDistance","spinAcceleration","getRangeValue","retina","pixelRatio","center","direction","angle","radius","isEnabled","destroyed","_particle$retina","_particle$retina$move","_particle$retina2","_particle$retina2$mov","_particle$retina$maxS","particleOptions","pxRatio","slowFactor","slow","inRange","getProximitySpeedFactor","baseSpeed","reduceFactor","drift","maxSize","getRangeMax","getRadius","updateFunc","maxCanvasSize","initialPosition","dx","dy","getDistances","dxFixed","abs","dyFixed","maxDistance","hDistance","horizontal","vDistance","vertical","misplaced","vel","getRandom","applyDistance","CircleDrawer","draw","context","circleRange","PI","arc","getSidesCount","particleInit","_shapeData$angle","shapeData","isObject","updateColorValue","colorValue","valueAnimation","decrease","_colorValue$maxLoops","_colorValue$loops","_colorValue$maxLoops2","_colorValue$delayTime","_colorValue$delayTime2","_colorValue$delayTime3","_colorValue$delayTime4","_colorValue$velocity","_colorValue$decay","maxLoops","loops","time","delayTime","offset","randomInRange","status","ColorUpdater","hslColor","rangeColorToHsl","id","reduceDuplicates","getHslAnimationFromHsl","animation","h","hAnimation","s","sAnimation","l","lAnimation","spawning","update","updateColor","OpacityUpdater","opacityOptions","opacity","initParticleNumericAnimationValue","opacityAnimation","sync","_particle$opacity$max","_particle$opacity$max2","_particle$opacity$loo","_particle$opacity$max3","reset","_data$maxLoops","_data$loops","_data$maxLoops2","_data$decay","_data$delayTime","_data$delayTime2","_data$delayTime3","_data$delayTime4","data","minValue","maxValue","_data$velocity","_data$velocity2","checkDestroy","updateOpacity","BounceOutMode","modes","outMode","includes","handled","plugin","plugins","particleBounce","bounds","calculateBounds","canvasSize","right","left","bounced","newVelocity","getValue","bounce","minPos","bounceHorizontal","bottom","top","bounceVertical","DestroyOutMode","_delta","outType","isPointInside","Vector","origin","moveCenter","vx","vy","remove","NoneOutMode","pRadius","OutOutMode","circVec","length","create","floor","newDx","newDy","atan2","wrap","warp","newPos","sizeValue","nextBounds","OutOfCanvasUpdater","_updateOutMode","updater","updaters","_outModes$bottom","_outModes$left","_outModes$right","_outModes$top","outModes","default","SizeUpdater","sizeAnimation","_particle$retina$size","sizeAnimationSpeed","_particle$size$maxLoo","_particle$size$maxLoo2","_particle$size$loops","_particle$size$maxLoo3","sizeVelocity","updateSize","async","loadBasic","refresh","arguments","addMover","loadBaseMover","addShape","loadCircleShape","addParticleUpdater","loadColorUpdater","loadOpacityUpdater","loadOutModesUpdater","loadSizeUpdater","ExternalInteractorBase","type","Attract","duration","easing","Attractor","super","_clickAttract","attract","finish","count","clicking","mousePos","interactivity","mouse","clickPosition","attractRadius","attractModeDistance","_processAttract","Circle","_hoverAttract","area","attractOptions","actualOptions","query","quadTree","p","attractFactor","getEasing","normVec","subFrom","_engine","handleClickMode","mode","setTo","initialVelocity","setTimeout","clear","interact","mouseMoveStatus","mouseMoveEvent","events","hoverEnabled","onHover","hoverMode","clickEnabled","onClick","clickMode","isInArray","_particle$interactivi","loadModeOptions","_len","sources","Array","_key","source","Bounce","Bouncer","_processBounce","circleBounce","circleBounceDataFromParticle","mass","Rectangle","rectBounce","_processMouseBounce","tolerance","bounceModeDistance","_singleSelectorBounce","div","querySelectorAll","forEach","item","elem","offsetLeft","offsetWidth","offsetTop","offsetHeight","divs","onDiv","divModeExecute","isDivModeEnabled","BubbleBase","mix","sourceColor","isArray","executeOnSingleOrMultiple","OptionsColor","BubbleDiv","selectors","ids","t","concat","Bubble","tmp","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","Bubbler","_clickBubble","mouseClickPos","bubbleOptions","bubble","bubbleModeDistance","queryCircle","_particle$opacity$val","_particle$opacity","durationEnd","distMouse","timeSpent","Date","getTime","clickTime","sizeData","bubbleObj","optValue","bubbleModeSize","particlesObj","_process","opacityData","_hoverBubbleColor","_hoverBubble","pointDistance","_hoverBubbleSize","_hoverBubbleOpacity","mouseLeaveEvent","divBubble","finalColor","modeColor","bubbleColor","itemFromSingleOrMultiple","pColor","getFillColor","rgbToHsl","colorMix","_divBubble$opacity","_options$interactivit","_particle$opacity$val2","_particle$opacity2","modeOpacity","optOpacity","modeSize","optSize","bubbleParam","bubbleDuration","bubbleDistance","particlesParam","pObjBubble","pObj","_singleSelectorHover","repulseRadius","contains","divMode","force","ConnectLinks","Connect","lineLinked","line_linked","_ref","_data$links","lineStyle","ctx","p1","p2","connectOptions","connect","gradStop","color1","color2","sourcePos","destPos","midRgb","grad","createLinearGradient","addColorStop","getStyleFromHsl","getStyleFromRgb","gradient","drawConnection","_p1$retina$linksWidth","ls","pos1","pos2","begin","end","drawLine","lineWidth","strokeStyle","stroke","drawConnectLine","linksWidth","Connector","connectModeDistance","connectModeRadius","i","slice","distMax","xDiff","yDiff","GrabLinks","blink","consent","Grab","drawGrab","lineColor","_particle$retina$link","beginPos","colorLine","drawGrabLine","Grabber","grab","grabModeDistance","_grabLineOptions$colo","_particle$options$lin","grabLineOptions","lineOpacity","opacityLine","optColor","grabLineColor","linksOptions","getLinkRandomColor","getLinkColor","Pauser","getAnimationStatus","Push","groups","quantity","particles_nb","setRangeValue","_data$quantity","Pusher","pushOptions","push","group","itemFromArray","groupOptions","Remove","Remover","removeNb","removeQuantity","RepulseBase","RepulseDiv","Repulse","Repulser","_clickRepulse","repulseOptions","repulse","repulseDistance","repulseModeDistance","pow","range","d","vect","_hoverRepulse","_processRepulse","divRepulse","_divRepulse$speed","repulseFactor","_singleSelectorRepulse","repulseOpts","hover","click","Slow","Slower","slowModeRadius","slowOptions","particlePos","dist","proximityFactor","InterlaceOffsets","InterlaceSteps","ByteStream","bytes","Uint8ClampedArray","getString","reduce","acc","curr","String","fromCharCode","nextByte","nextTwoBytes","readSubBlocks","blockString","readSubBlocksBin","len","blockData","Uint8Array","skipSubBlocks","parseColorTable","byteStream","colors","r","g","b","parseBlock","gif","avgAlpha","getFrameIndex","getTransparencyIndex","progressCallback","frame","frames","packedByte","localColorTableFlag","interlacedFlag","sortFlag","reserved","localColorCount","localColorTable","getColor","index","globalColorTable","a","image","ImageData","colorSpace","error","DOMException","name","EvalError","minCodeSize","imageData","clearCode","readBits","bytePos","bitPos","code","dic","pass","pixelPos","lineIndex","last","bitmap","createImageBitmap","parseImageBlock","GCreserved","disposalMethod","userInputDelayFlag","transparencyFlag","transparencyIndex","applicationExtension","identifier","authenticationCode","applicationExtensions","comments","plainTextData","charSize","foregroundColor","backgroundColor","text","parseExtensionBlock","currentColorRegex","loadImage","Promise","resolve","loading","img","Image","element","addEventListener","getLogger","errorPrefix","src","loadGifImage","_getGIFLoopAmount","gifData","gifURL","res","fetch","ok","buffer","arrayBuffer","totalTime","colorRes","pixelAspectRatio","backgroundImage","globalColorTableFlag","globalColorCount","backgroundColorIndex","copyWithin","frameIndex","incrementFrameIndex","getframeIndex","increment","newValue","Infinity","message","decodeGIF","gifLoopCount","extension","NaN","getGIFLoopAmount","_unused","downloadSvgImage","response","svgData","replaceImageColor","_imageData$replaceCol","svgColoredData","imageShape","colorStyle","preFillIndex","indexOf","substring","replaceColorSvg","imageRes","_objectSpread","loaded","replaceColor","replace_color","svg","Blob","domUrl","URL","webkitURL","url","createObjectURL","revokeObjectURL","img2","ImageDrawer","loadImageShape","_imageShape$replaceCo","addImage","images","globalAlpha","_particle$gifFrame","offscreenCanvas","OffscreenCanvas","offscreenContext","getContext","_image$gifLoopCount","imageSmoothingQuality","imageSmoothingEnabled","clearRect","gifFrame","gifTime","scale","drawImage","putImageData","previousImageData","getImageData","preload","loadShape","shape","find","_ref2","_imageData$fill","_imageData$close","_image$ratio","fill","close","Preload","ImagePreloaderPlugin","getPlugin","loadOptions","preloadOptions","existing","needsPlugin","_data$gif","_data$name","imageFunc","_data$name2","addLoadImageToEngine","preloader","addPlugin","LifeDelay","ValueWithRandom","LifeDuration","random","minimumValue","Life","delay","LifeUpdater","lifeOptions","life","justSpawned","widthRange","heightRange","LineDrawer","_shapeData$cap","moveTo","lineTo","lineCap","cap","ParallaxMover","isSsr","parallax","parallaxOptions","parallaxForce","canvasCenter","parallaxSmooth","smooth","centerDistance","ParticlesInteractorBase","_p1$retina$attractDis","attractDistance","rotate","ax","ay","p1Factor","p2Factor","updateAbsorb","r1","r2","collisions","absorb","fixBounceSpeed","collisionMaxSpeed","resolveCollision","unbreakable","Collider","radius1","radius2","round","z","CircleWarp","point","intersects","rect","circle","biggerCircle","rectSW","LinksShadow","blur","LinksTriangle","frequency","Links","shadow","triangles","getLinkDistance","optDistance","absDiffs","warpDistances","sqrt","Linker","_setColor","linkContainer","linkColor","linksColor","linksColors","get","Map","_p1$retina$linksDista","linkOpt1","linksDistance","linkOpt2","some","destination","loadParticlesOptions","_source$links","setLinkFrequency","dictionary","key","sort","join","LinkInstance","_drawLinkLine","link","p1LinksOptions","_p1$options$twinkle","twinkle","lines","twinkleFreq","twinkleRgb","rangeColorToRgb","backgroundMask","params","drawn","pi1","pi2","endNE","d1","yi","endSW","d2","xi","endSE","d3","globalCompositeOperation","composite","shadowColor","shadowBlur","drawLinkLine","_drawLinkTriangle","link1","link2","_triangleOptions$opac","triangleOptions","p3","opacityTriangle","_p1$retina$linksDista2","pos3","colorTriangle","drawTriangle","fillStyle","drawLinkTriangle","_drawTriangles","p1Links","_options$links","_p2$options$links","_p2$links","vertices","filter","linkFreq","_getLinkFrequency","findIndex","vertex","_getTriangleFrequency","_freqs","drawParticle","particleCreated","particleDestroyed","LinksPlugin","loadParticlesLinksInteraction","addInteractor","loadLinksInteraction","loadLinksPlugin","PolygonDrawerBase","start","getCenter","side","getSidesData","sideCount","numerator","denominator","decimalSides","interiorAngleDegrees","interiorAngle","beginPath","translate","_polygon$sides","polygon","sides","nb_sides","PolygonDrawer","TriangleDrawer","loadPolygonShape","loadGenericPolygonShape","loadTriangleShape","RotateAnimation","Rotate","RotateUpdater","rotateOptions","pathRotation","rotateDirection","rotateAnimation","rotation","_particle$rotate$valu","_particle$rotate","_rotate$velocity","_rotate$decay","updateRotate","fixFactor","SquareDrawer","fixedRadius","fixedDiameter","StarDrawer","_particle$starInset","inset","starInset","_star$sides","star","_star$inset","StrokeColorUpdater","_stroke$opacity","_stroke$color","_rangeColorToHsl","strokeWidth","strokeOpacity","strokeAnimation","strokeHslColor","strokeColor","updateStrokeColor","validTypes","TextDrawer","_character$style","_character$weight","_character$font","character","textData","randomIndexData","style","weight","font","offsetX","fillText","strokeText","shapeOptions","promises","loadFont","all","loadSlim","loadParallaxMover","loadExternalAttractInteraction","loadExternalBounceInteraction","loadExternalBubbleInteraction","loadExternalConnectInteraction","loadExternalGrabInteraction","loadExternalPauseInteraction","loadExternalPushInteraction","loadExternalRemoveInteraction","loadExternalRepulseInteraction","loadExternalSlowInteraction","loadParticlesAttractInteraction","loadParticlesCollisionsInteraction","addEasing","loadEasingQuadPlugin","loadLineShape","loadSquareShape","loadStarShape","loadTextShape","loadLifeUpdater","loadRotateUpdater","loadStrokeColorUpdater"],"sourceRoot":""}